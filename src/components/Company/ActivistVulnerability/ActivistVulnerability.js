import React, {
  useState,
  useEffect,
  useLayoutEffect,
  useCallback,
  lazy,
} from 'react';
import { Redirect, withRouter } from 'react-router';
import qs from 'qs';
import PropTypes from 'prop-types';
import '../../../styles/components/_popupTrialUser.scss';
import {
  COMPANY_SEARCH,
  // GREEN_FLAG_LARGE,
  // ICON_IMAGE_PATH,
  // RED_FLAG_LARGE,
} from '../../../constants/PathsConstant';
import bn from '../../../utils/bemnames';
import {
  checkValuesToFixed,
  setCellStyleFinancial,
  buildFinancialSPPTable,
  buildFinancialSPPTableHorizonatal,
  // formatCellEitherMillionsOrPercent,
  formatCellEitherMillionsOrPercentExcelDownload,
  gridWidthValuesSml,
  // numberToCommaString,
} from '../../../utils/table-tools-util';
import {
  calculateHealth,
  exclaimImage,
  DisplayFlagsByName,
} from '../../../utils/aivFunctions';
import {
  NOMADMSDIFFERENCE,
  NOMADMSDIFFERENCEIOWNERSHIP,
  NOMADMSDIFFERENCEAOWNERSHIP,
  NOMADMSDIFFERENCEVOTING,
  NOMADMSDIFFERENCENODIRECTORS,
  NOMADMSDIFFERENCETENURE,
  NOMADMSDIFFERENCEAGE,
  HEALTHCHECK_VALUE,
  KEYFIN_COL_SPAN,
  KEYRAT_COL_SPAN,
  STAND_COL_SPAN,
  METRIC_ID_HEADER,
  ARRAY_LOWEST_VALUE,
  SHPPER_COL_SPAN,
  PERFORMANCE_KEY_RATIO_HEADING,
  VALUATION_KEY_RATIO_HEADING,
  PROFITABILITY_KEY_RATIO_HEADING,
  GROWTH_KEY_RATIO_HEADING,
  BALANCE_KEY_RATIO_HEADING,
  YEAR_IN_MILLISECONDS,
} from '../../../constants/ActivistInsightsVulnerabilityConstant';
import IWidget from '../../GeneralForm/IWidget';
import D3DoughnutChart from '../../GeneralForm/D3DoughnutChart';
import { dateToNull } from '../../../utils/general-util';
import { NUMBER_ONE } from '../../../constants/NumberConstants';
import { LOADING } from '../../../constants/MessageConstans';
import ErrorBoundary from '../../GeneralForm/ErrorBoundary';
import PeerGroupComponent from '../../GeneralForm/PeerGroupComponent';
import Companyandinvestorfilter from '../../MyAlert/Components/CompanyAndInvestorFilter';

const Page = lazy(() => import('../../Page'));
const MultiNewsComponent = lazy(() =>
  import('../../News/Components/MultiNewsComponent')
);
const FooterCard = lazy(() => import('../../GeneralForm/FooterCard'));
const Table = lazy(() => import('../../GeneralForm/Table'));
const Card = lazy(() => import('../../GeneralForm/Card'));
const D3LineChart = lazy(() => import('../../GeneralForm/D3LineChart'));

const bem = bn.create('activistInvestorVulnerability');
const bemNews = bn.create('news');

const ActivistVulnerability = (props) => {
  const {
    location,
    TrialStatus,
    aivPIGetIssuer,
    aivRecentFilings,
    aivDirectorInfo,
    rowData,
    allowDownload,
    aivPIGetShareholdersTop10,
    aivGetVunGetAllInstitutionalMediansAndMADMs,
    aivGetVunGetAllActivistMediansAndMADMs,
    aivPIGetMostRecentAGMOrPCMeetingIdWithVotes,
    aivVulnerabilityReport,
    VulnerabilityScoreOverTime,
    VulnerabilityPrankOverTime,
    handleToggleChart,
    toggleChart,
    vunSummaryScoreData,
    vunDirectorCompany,
    vunDirectorAllCompanies,
    vunDirectorPeerGroup,
    vunDirectorSP500,
    TrialUser,
    TrialUserDisableDownload,
    isLoadingData,
    //
    vunKeyFinancials,
    vunYears,
    vunKeyRatios,
    activistInvestors,
    activismSummary,
    engagement,
    maxEndDate,
    activistInPlay,
    percentileRank,
    tickerName,
    vunSPP,
    //
    meetingDate,
    recentVotingResults,
    votingRemuneration,
    votingRemunerationOneYearBack,
    directorMedian,
    //
    vunReport,
    vunReportIDs,
  } = props;
  const query = qs.parse(location.search, { ignoreQueryPrefix: true });
  //news
  const [newsDetailsArray, setNewsDetailsArray] = useState([]);
  const [isOpenedOn, setIsOpenedOn] = useState(true);
  const [loadedIds, setLoadedIds] = useState([]);
  //

  const [vunCompanySummary, setVunCompanySummary] = useState([]);
  const [vunKeyRatiosHealth, setVunKeyRatiosHealth] = useState(
    props.vunKeyRation
  );

  const [articleID, setArticleID] = useState(0);
  const [newsDetailsLocation, setNewsDetailsLocation] = useState(null);
  const [isVunReport, setIsVunReport] = useState(true);
  const [articleMode, setArticleMode] = useState(false);
  // const [staticPathConsts] = useState(`${props.location.pathname}${props.location.search}`);
  const [openOnLoad, setOpenOnLoad] = useState(true);
  const [article404, setArticle404] = useState(true);
  // const [newsIds, setNewsIds] = useState([]);
  const [isClickMostRead, setIsClickMostRead] = useState(false);
  const [isMostReadorNot, setIsMostReadorNot] = useState(false);
  const [companyName, setCompanyName] = useState('');

  const [indexID, setIndex] = useState(0);
  //for vulnerability news
  const data = query.pid.split('&');
  const staticPathConsts = `${window.location.pathname}?pid=${data[0]}`;
  //

  const [vunDirectorsHealth, setVunDirectorsHealth] = useState({
    directNumPG: null,
    directNumSP: null,
    directNumAll: null,
    directTenPG: null,
    directTenSP: null,
    directTenAll: null,
    directAgePG: null,
    directAgeSP: null,
    directAgeAll: null,
    done: false,
  });

  const [vunOwnerHealth, setVunOwnerHealth] = useState({
    instOwnerPG: null,
    instOwnerSP: null,
    instOwnerAll: null,
    actOwnerPG: null,
    actOwnerSP: null,
    actOwnerAll: null,
    done: false,
  });

  const [vunVotingHealth, setVunVotingHealth] = useState({
    directSupPG: null,
    directSupSP: null,
    directSupAll: null,
    renumSupPG: null,
    renumSupSP: null,
    renumSupAll: null,
    done: false,
  });

  const [vunFundementalsHealth, setVunFundementalsHealth] = useState({
    valuationPG: null,
    valuationSP: null,
    valuationAll: null,
    performancePG: null,
    performanceSP: null,
    performanceAll: null,
    profitabilityPG: null,
    profitabilitySP: null,
    profitabilityAll: null,
    growthPG: null,
    growthSP: null,
    growthAll: null,
    balancePG: null,
    balanceSP: null,
    balanceAll: null,
    done: false,
  });

  const summaryCompanyGenerator = useCallback(() => {
    // Here is a lot of code that needs to be run once, this is just to ensure that
    if (
      vunDirectorCompany !== undefined &&
      vunDirectorAllCompanies !== undefined &&
      vunDirectorPeerGroup !== undefined &&
      vunDirectorSP500 !== undefined &&
      vunDirectorsHealth.done === false
    ) {
      const directNumPG = calculateHealth(
        vunDirectorCompany.No_of_directors,
        vunDirectorPeerGroup.No_of_directors,
        vunDirectorPeerGroup.MADMND,
        NOMADMSDIFFERENCENODIRECTORS,
        true,
        TrialStatus
      );
      const directNumSP = calculateHealth(
        vunDirectorCompany.No_of_directors,
        vunDirectorSP500.No_of_directors,
        vunDirectorSP500.MADMND,
        NOMADMSDIFFERENCENODIRECTORS,
        true,
        TrialStatus
      );
      const directNumAll = calculateHealth(
        vunDirectorCompany.No_of_directors,
        vunDirectorAllCompanies.No_of_directors,
        vunDirectorAllCompanies.MADMND,
        NOMADMSDIFFERENCENODIRECTORS,
        true,
        TrialStatus
      );
      const directTenPG = calculateHealth(
        vunDirectorCompany.Longest_tenure,
        vunDirectorPeerGroup.Longest_tenure,
        vunDirectorPeerGroup.MADMTen,
        NOMADMSDIFFERENCETENURE
      );
      const directTenSP = calculateHealth(
        vunDirectorCompany.Longest_tenure,
        vunDirectorSP500.Longest_tenure,
        vunDirectorSP500.MADMTen,
        NOMADMSDIFFERENCETENURE
      );
      const directTenAll = calculateHealth(
        vunDirectorCompany.Longest_tenure,
        vunDirectorAllCompanies.Longest_tenure,
        vunDirectorAllCompanies.MADMTen,
        NOMADMSDIFFERENCETENURE
      );
      const directAgePG = calculateHealth(
        vunDirectorCompany.Oldest_director,
        vunDirectorPeerGroup.Oldest_director,
        vunDirectorPeerGroup.MADMAge,
        NOMADMSDIFFERENCEAGE
      );
      const directAgeSP = calculateHealth(
        vunDirectorCompany.Oldest_director,
        vunDirectorSP500.Oldest_director,
        vunDirectorSP500.MADMAge,
        NOMADMSDIFFERENCEAGE
      );
      const directAgeAll = calculateHealth(
        vunDirectorCompany.Oldest_director,
        vunDirectorAllCompanies.Oldest_director,
        vunDirectorAllCompanies.MADMAge,
        NOMADMSDIFFERENCEAGE
      );

      setVunDirectorsHealth({
        directNumPG,
        directNumSP,
        directNumAll,
        directTenPG,
        directTenSP,
        directTenAll,
        directAgePG,
        directAgeSP,
        directAgeAll,
        done: true,
      });
    }

    if (
      aivGetVunGetAllInstitutionalMediansAndMADMs !== undefined &&
      aivGetVunGetAllActivistMediansAndMADMs !== undefined &&
      vunOwnerHealth.instOwnerPG === null &&
      vunOwnerHealth.done === false
    ) {
      const instOwnerPG = calculateHealth(
        aivGetVunGetAllInstitutionalMediansAndMADMs.IIAct,
        aivGetVunGetAllInstitutionalMediansAndMADMs.IIMedPG,
        aivGetVunGetAllInstitutionalMediansAndMADMs.IIMADMPG,
        NOMADMSDIFFERENCEIOWNERSHIP
      );
      const instOwnerSP = calculateHealth(
        aivGetVunGetAllInstitutionalMediansAndMADMs.IIAct,
        aivGetVunGetAllInstitutionalMediansAndMADMs.IIMedSP,
        aivGetVunGetAllInstitutionalMediansAndMADMs.IIMADMSP,
        NOMADMSDIFFERENCEIOWNERSHIP
      );
      const instOwnerAll = calculateHealth(
        aivGetVunGetAllInstitutionalMediansAndMADMs.IIAct,
        aivGetVunGetAllInstitutionalMediansAndMADMs.IIMedAC,
        aivGetVunGetAllInstitutionalMediansAndMADMs.IIMADMAC,
        NOMADMSDIFFERENCEIOWNERSHIP
      );
      const actOwnerPG = calculateHealth(
        aivGetVunGetAllActivistMediansAndMADMs.AIAct,
        aivGetVunGetAllActivistMediansAndMADMs.AIMedPG,
        aivGetVunGetAllActivistMediansAndMADMs.AIMADMPG,
        NOMADMSDIFFERENCEAOWNERSHIP
      );
      const actOwnerSP = calculateHealth(
        aivGetVunGetAllActivistMediansAndMADMs.AIAct,
        aivGetVunGetAllActivistMediansAndMADMs.AIMedSP,
        aivGetVunGetAllActivistMediansAndMADMs.AIMADMSP,
        NOMADMSDIFFERENCEAOWNERSHIP
      );
      const actOwnerAll = calculateHealth(
        aivGetVunGetAllActivistMediansAndMADMs.AIAct,
        aivGetVunGetAllActivistMediansAndMADMs.AIMedAC,
        aivGetVunGetAllActivistMediansAndMADMs.AIMADMAC,
        NOMADMSDIFFERENCEAOWNERSHIP
      );

      setVunOwnerHealth({
        instOwnerPG,
        instOwnerSP,
        instOwnerAll,
        actOwnerPG,
        actOwnerSP,
        actOwnerAll,
        done: true,
      });
    }

    if (vunVotingHealth.done === false && directorMedian !== undefined) {
      if (directorMedian && directorMedian.length > 0) {
        const res = directorMedian[0];
        const res1 = directorMedian[1];
        const directSupPG = calculateHealth(
          res.VFDAct,
          res.VFDMedPG,
          res.VFDMADMPG,
          NOMADMSDIFFERENCEVOTING,
          false,
          HEALTHCHECK_VALUE,
          1
        );
        const directSupSP = calculateHealth(
          res.VFDAct,
          res.VFDMedSP,
          res.VFDMADMSP,
          NOMADMSDIFFERENCEVOTING,
          false,
          HEALTHCHECK_VALUE,
          1
        );
        const directSupAll = calculateHealth(
          res.VFDAct,
          res.VFDMedAC,
          res.VFDMADMAC,
          NOMADMSDIFFERENCEVOTING,
          false,
          HEALTHCHECK_VALUE,
          1
        );
        const renumSupPG = calculateHealth(
          res1.VFRAct,
          res1.VFRMedPG,
          res1.VFRMADMPG,
          NOMADMSDIFFERENCEVOTING,
          false,
          HEALTHCHECK_VALUE,
          1
        );
        const renumSupSP = calculateHealth(
          res1.VFRAct,
          res1.VFRMedSP,
          res1.VFRMADMSP,
          NOMADMSDIFFERENCEVOTING,
          false,
          HEALTHCHECK_VALUE,
          1
        );
        const renumSupAll = calculateHealth(
          res1.VFRAct,
          res1.VFRMedAC,
          res1.VFRMADMAC,
          NOMADMSDIFFERENCEVOTING,
          false,
          HEALTHCHECK_VALUE,
          1
        );

        setVunVotingHealth({
          done: true,
          directSupPG,
          directSupSP,
          directSupAll,
          renumSupPG,
          renumSupSP,
          renumSupAll,
        });
      }
    }

    if (
      vunKeyRatios &&
      vunKeyRatios.length > ARRAY_LOWEST_VALUE &&
      vunFundementalsHealth.done === false
    ) {
      const arrKeyRatiosHealth = [];
      const jsonFundementalsHealth = {
        valuationPG: null,
        valuationSP: null,
        valuationAll: null,
        performancePG: null,
        performanceSP: null,
        performanceAll: null,
        profitabilityPG: null,
        profitabilitySP: null,
        profitabilityAll: null,
        growthPG: null,
        growthSP: null,
        growthAll: null,
        balancePG: null,
        balanceSP: null,
        balanceAll: null,
        done: false,
      };
      vunKeyRatios.forEach((data) => {
        const resultPG = calculateHealth(
          data.TTM,
          data.PeerGroup,
          data.PeerMADM,
          NOMADMSDIFFERENCE,
          false,
          HEALTHCHECK_VALUE,
          data.warn_lower
        );
        const resultSP = calculateHealth(
          data.TTM,
          data.SP500,
          data.SP500MADM,
          NOMADMSDIFFERENCE,
          false,
          HEALTHCHECK_VALUE,
          data.warn_lower
        );
        const resultAll = calculateHealth(
          data.TTM,
          data.AllMed,
          data.AllMADM,
          NOMADMSDIFFERENCE,
          false,
          HEALTHCHECK_VALUE,
          data.warn_lower
        );

        if (data.key_ratios_heading_id === VALUATION_KEY_RATIO_HEADING) {
          if (jsonFundementalsHealth.valuationPG !== exclaimImage) {
            jsonFundementalsHealth.valuationPG = resultPG;
          }
          if (jsonFundementalsHealth.valuationSP !== exclaimImage) {
            jsonFundementalsHealth.valuationSP = resultSP;
          }
          if (jsonFundementalsHealth.valuationAll !== exclaimImage) {
            jsonFundementalsHealth.valuationAll = resultAll;
          }
        }
        if (data.key_ratios_heading_id === PERFORMANCE_KEY_RATIO_HEADING) {
          if (jsonFundementalsHealth.performancePG !== exclaimImage) {
            jsonFundementalsHealth.performancePG = resultPG;
          }
          if (jsonFundementalsHealth.performanceSP !== exclaimImage) {
            jsonFundementalsHealth.performanceSP = resultSP;
          }
          if (jsonFundementalsHealth.performanceAll !== exclaimImage) {
            jsonFundementalsHealth.performanceAll = resultAll;
          }
        }
        if (data.key_ratios_heading_id === PROFITABILITY_KEY_RATIO_HEADING) {
          if (jsonFundementalsHealth.profitabilityPG !== exclaimImage) {
            jsonFundementalsHealth.profitabilityPG = resultPG;
          }
          if (jsonFundementalsHealth.profitabilitySP !== exclaimImage) {
            jsonFundementalsHealth.profitabilitySP = resultSP;
          }
          if (jsonFundementalsHealth.profitabilityAll !== exclaimImage) {
            jsonFundementalsHealth.profitabilityAll = resultAll;
          }
        }

        if (data.key_ratios_heading_id === GROWTH_KEY_RATIO_HEADING) {
          if (jsonFundementalsHealth.growthPG !== exclaimImage) {
            jsonFundementalsHealth.growthPG = resultPG;
          }
          if (jsonFundementalsHealth.growthSP !== exclaimImage) {
            jsonFundementalsHealth.growthSP = resultSP;
          }
          if (jsonFundementalsHealth.growthAll !== exclaimImage) {
            jsonFundementalsHealth.growthAll = resultAll;
          }
        }
        if (data.key_ratios_heading_id === BALANCE_KEY_RATIO_HEADING) {
          if (jsonFundementalsHealth.balancePG !== exclaimImage) {
            jsonFundementalsHealth.balancePG = resultPG;
          }
          if (jsonFundementalsHealth.balanceSP !== exclaimImage) {
            jsonFundementalsHealth.balanceSP = resultSP;
          }
          if (jsonFundementalsHealth.balanceAll !== exclaimImage) {
            jsonFundementalsHealth.balanceAll = resultAll;
          }
        }
        const healthy1 = resultPG;
        const healthy2 = resultSP;
        const healthy3 = resultAll;
        arrKeyRatiosHealth.push({
          ...data,
          Health1: healthy1,
          Health2: healthy2,
          Health3: healthy3,
        });
      });
      setVunKeyRatiosHealth(arrKeyRatiosHealth);
      setVunFundementalsHealth({ ...jsonFundementalsHealth, done: true });
    }

    const summaryRowData = [];
    summaryRowData.push({
      catagory: 'Fundamentals',
      rowSpan: 5,
      metric: 'Valuation',
      peers: vunFundementalsHealth.valuationPG,
      sp500: vunFundementalsHealth.valuationSP,
      all: vunFundementalsHealth.valuationAll,
    });
    summaryRowData.push({
      catagory: '',
      rowSpan: 0,
      metric: 'Performance',
      peers: vunFundementalsHealth.performancePG,
      sp500: vunFundementalsHealth.performanceSP,
      all: vunFundementalsHealth.performanceAll,
    });
    summaryRowData.push({
      catagory: '',
      rowSpan: 0,
      metric: 'Profitability',
      peers: vunFundementalsHealth.profitabilityPG,
      sp500: vunFundementalsHealth.profitabilitySP,
      all: vunFundementalsHealth.profitabilityAll,
    });
    summaryRowData.push({
      catagory: '',
      rowSpan: 0,
      metric: 'Growth',
      peers: vunFundementalsHealth.growthPG,
      sp500: vunFundementalsHealth.growthSP,
      all: vunFundementalsHealth.growthAll,
    });
    summaryRowData.push({
      catagory: '',
      rowSpan: 0,
      metric: 'Balance Sheet',
      peers: vunFundementalsHealth.balancePG,
      sp500: vunFundementalsHealth.balanceSP,
      all: vunFundementalsHealth.balanceAll,
    });
    summaryRowData.push({
      catagory: 'Ownership',
      rowSpan: 2,
      metric: 'Institutional Ownership',
      peers: vunOwnerHealth.instOwnerPG,
      sp500: vunOwnerHealth.instOwnerSP,
      all: vunOwnerHealth.instOwnerAll,
    });
    summaryRowData.push({
      catagory: '',
      rowSpan: 0,
      metric: 'Activist Ownership',
      peers: vunOwnerHealth.actOwnerPG,
      sp500: vunOwnerHealth.actOwnerSP,
      all: vunOwnerHealth.actOwnerAll,
    });
    summaryRowData.push({
      catagory: 'Voting',
      rowSpan: 2,
      metric: 'Director Support',
      peers: vunVotingHealth.directSupPG,
      sp500: vunVotingHealth.directSupSP,
      all: vunVotingHealth.directSupAll,
    });
    summaryRowData.push({
      catagory: '',
      rowSpan: 0,
      metric: 'Remuneration Support',
      peers: vunVotingHealth.renumSupPG,
      sp500: vunVotingHealth.renumSupSP,
      all: vunVotingHealth.renumSupAll,
    });
    summaryRowData.push({
      catagory: 'Governance',
      rowSpan: 3,
      metric: 'No. of Directors',
      peers: vunDirectorsHealth.directNumPG,
      sp500: vunDirectorsHealth.directNumSP,
      all: vunDirectorsHealth.directNumAll,
    });
    summaryRowData.push({
      catagory: '',
      rowSpan: 0,
      metric: 'Director Tenure',
      peers: vunDirectorsHealth.directTenPG,
      sp500: vunDirectorsHealth.directTenSP,
      all: vunDirectorsHealth.directTenAll,
    });
    summaryRowData.push({
      catagory: '',
      rowSpan: 0,
      metric: 'Director Age',
      peers: vunDirectorsHealth.directAgePG,
      sp500: vunDirectorsHealth.directAgeSP,
      all: vunDirectorsHealth.directAgeAll,
    });
    setVunCompanySummary(summaryRowData);
  }, [
    aivGetVunGetAllActivistMediansAndMADMs,
    aivGetVunGetAllInstitutionalMediansAndMADMs,
    directorMedian,
    vunDirectorAllCompanies,
    vunDirectorCompany,
    vunDirectorPeerGroup,
    vunDirectorSP500,
    vunDirectorsHealth.directAgeAll,
    vunDirectorsHealth.directAgePG,
    vunDirectorsHealth.directAgeSP,
    vunDirectorsHealth.directNumAll,
    vunDirectorsHealth.directNumPG,
    vunDirectorsHealth.directNumSP,
    vunDirectorsHealth.directTenAll,
    vunDirectorsHealth.directTenPG,
    vunDirectorsHealth.directTenSP,
    vunDirectorsHealth.done,
    vunFundementalsHealth.balanceAll,
    vunFundementalsHealth.balancePG,
    vunFundementalsHealth.balanceSP,
    vunFundementalsHealth.done,
    vunFundementalsHealth.growthAll,
    vunFundementalsHealth.growthPG,
    vunFundementalsHealth.growthSP,
    vunFundementalsHealth.performanceAll,
    vunFundementalsHealth.performancePG,
    vunFundementalsHealth.performanceSP,
    vunFundementalsHealth.profitabilityAll,
    vunFundementalsHealth.profitabilityPG,
    vunFundementalsHealth.profitabilitySP,
    vunFundementalsHealth.valuationAll,
    vunFundementalsHealth.valuationPG,
    vunFundementalsHealth.valuationSP,
    vunKeyRatios,
    vunOwnerHealth.actOwnerAll,
    vunOwnerHealth.actOwnerPG,
    vunOwnerHealth.actOwnerSP,
    vunOwnerHealth.done,
    vunOwnerHealth.instOwnerAll,
    vunOwnerHealth.instOwnerPG,
    vunOwnerHealth.instOwnerSP,
    vunVotingHealth.directSupAll,
    vunVotingHealth.directSupPG,
    vunVotingHealth.directSupSP,
    vunVotingHealth.done,
    vunVotingHealth.renumSupAll,
    vunVotingHealth.renumSupPG,
    vunVotingHealth.renumSupSP,
  ]);

  //Reset all page state on page load
  useEffect(() => {
    const abortController = new AbortController();
    setVunKeyRatiosHealth([]);
    setVunDirectorsHealth({
      directNumPG: null,
      directNumSP: null,
      directNumAll: null,
      directTenPG: null,
      directTenSP: null,
      directTenAll: null,
      directAgePG: null,
      directAgeSP: null,
      directAgeAll: null,
      done: false,
    });
    setVunOwnerHealth({
      instOwnerPG: null,
      instOwnerSP: null,
      instOwnerAll: null,
      actOwnerPG: null,
      actOwnerSP: null,
      actOwnerAll: null,
      done: false,
    });
    setVunVotingHealth({
      directSupPG: null,
      directSupSP: null,
      directSupAll: null,
      renumSupPG: null,
      renumSupSP: null,
      renumSupAll: null,
      done: false,
    });
    setVunFundementalsHealth({
      valuationPG: null,
      valuationSP: null,
      valuationAll: null,
      performancePG: null,
      performanceSP: null,
      performanceAll: null,
      profitabilityPG: null,
      profitabilitySP: null,
      profitabilityAll: null,
      growthPG: null,
      growthSP: null,
      growthAll: null,
      balancePG: null,
      balanceSP: null,
      balanceAll: null,
      done: false,
    });
    return function cleanup() {
      abortController.abort();
    };
  }, [props.vunKeyRation]);

  useLayoutEffect(() => {
    const abortController = new AbortController();
    summaryCompanyGenerator();
    return function cleanup() {
      abortController.abort();
    };
  }, [summaryCompanyGenerator]);

  if (!query.pid) {
    return <Redirect to={COMPANY_SEARCH} />;
  }

  const gridOptionsCompanySummary = {
    suppressRowTransform: true,
    colDefsMedalsIncluded: [
      {
        headerName: 'Category',
        field: 'catagory',
        sortable: false,
        autoHeight: true,
        rowSpan: (params) => params.data.rowSpan,
        cellClass: 'rowSpanned',
        cellStyle: {
          positon: 'sticky',
        },
        minWidth: query.print ? 250 : 200,
        maxWidth: query.print ? 250 : null,
        cellRenderer: (params) => {
          const eDiv = document.createElement('div');
          eDiv.innerHTML = `<a rel="noopener noreferrer" class="text-secondary" 
                            href="#${params.data.catagory}">
                            <strong>${params.data.catagory}</strong></a>`;
          return eDiv;
        },
      },
      {
        headerName: 'Metric',
        field: 'metric',
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small',
        sortable: false,
        autoHeight: true,
        minWidth: query.print ? 335 : 200,
        maxWidth: query.print ? 335 : null,
      },
      {
        headerName: 'Peers',
        field: 'peers',
        sortable: false,
        minWidth: query.print ? 150 : 70,
        maxWidth: query.print ? 150 : 80,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        cellRendererFramework: (params) =>
          DisplayFlagsByName(params.data.peers),
      },
      {
        headerName: 'S&P 500',
        field: 'sp500',
        sortable: false,
        minWidth: query.print ? 150 : 70,
        maxWidth: query.print ? 150 : 80,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        cellRendererFramework: (params) =>
          DisplayFlagsByName(params.data.sp500),
      },
      {
        headerName: 'All',
        field: 'all',
        sortable: false,
        minWidth: query.print ? 150 : 70,
        maxWidth: query.print ? 150 : 80,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        cellRendererFramework: (params) => DisplayFlagsByName(params.data.all),
      },
    ],
    colDefsMedalsExcluded: [],
    getRowHeight(params) {
      if (query.print) {
        if (params.data.rowSpan !== 0) {
          return 35;
        }
        return 35;
      }
      return 42;
    },
    pinColumns: {
      isPinOption: false,
      columns: [
        {
          colId: 'entry_text',
          pinned: 'left',
        },
      ],
    },
    paggination: { isPagging: false },
    isfloatingFilter: false,
    rowData: vunCompanySummary.map((x) => ({
      ...x,
      TrialStatus,
      allowDownload,
    })),
  };

  const gridOptionsKeyFinancials = {
    immutableData: true,
    colDefsMedalsIncluded: [
      {
        headerName: 'Metric',
        field: 'entry_text',
        sortable: false,
        cellClass: (params) => {
          if (params.data.metric_id === METRIC_ID_HEADER) {
            return null;
          }
          return 'ws-normal-lh24 ps-1 pe-1';
        },
        autoHeight: true,
        minWidth: query.print ? 338 : 200,
        maxWidth: query.print ? 338 : null,
        colSpan: (params) => {
          if (params.data.oc === METRIC_ID_HEADER) {
            return KEYRAT_COL_SPAN;
          }
          return STAND_COL_SPAN;
        },
        cellRendererFramework: (params) => (
          <div>
            <IWidget tooltipOverrideString={params.data.info} />
            {params.data.entry_text}
          </div>
        ),
        cellStyle: (params) => {
          if (params.data.oc === METRIC_ID_HEADER) {
            return { fontWeight: 'bold' };
          }
          return null;
        },
      },
      {
        headerName: "TTM (000's)",
        field: 'TTM',
        sortable: false,
        minWidth: query.print ? 100 : 70,
        maxWidth: query.print ? 100 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        colSpan: (params) => {
          if (params.data.oc === METRIC_ID_HEADER) {
            return KEYRAT_COL_SPAN;
          }
          return STAND_COL_SPAN;
        },
      },
      {
        headerName: `${vunYears.year_current} (000s)`,
        field: 'year_current',
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        sortable: false,
        minWidth: query.print ? 120 : 70,
        maxWidth: query.print ? 120 : null,
      },
      {
        headerName: `${vunYears.year_minus_1} (000s)`,
        field: 'year_minus_1',
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        sortable: false,
        minWidth: query.print ? 120 : 70,
        maxWidth: query.print ? 120 : null,
      },
      {
        headerName: `${vunYears.year_minus_2} (000s)`,
        field: 'year_minus_2',
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        sortable: false,
        minWidth: query.print ? 120 : 70,
        maxWidth: query.print ? 120 : null,
      },
      {
        headerName: `${vunYears.year_minus_3} (000s)`,
        field: 'year_minus_3',
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        sortable: false,
        minWidth: query.print ? 120 : 70,
        maxWidth: query.print ? 120 : null,
      },
      {
        headerName: `${vunYears.year_minus_4} (000s)`,
        field: 'year_minus_4',
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        sortable: false,
        minWidth: query.print ? 120 : 70,
        maxWidth: query.print ? 120 : null,
      },
      //    {
      //     headerName: `${vunYears.year_minus_5} (000s)`,
      //      field: "year_minus_5",
      //      cellClass: TrialStatus
      //       ? "ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell"
      //        : "ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell",
      //      sortable: false,
      //     minWidth: query.print ? 100 : 70,
      //      maxWidth: query.print ? 100 : null,
      //      cellRendererFramework: (params) =>
      //        formatCellEitherMillionsOrPercent(
      //          params.data.entry_text,
      //          "EPS",
      //          params.data.year_minus_5
      //        ),
      //    },
    ],
    colDefsMedalsExcluded: [],
    headerHeight: 50,
    pinColumns: {
      isPinOption: true,
      columns: [
        {
          colId: 'entry_text',
          pinned: 'left',
        },
      ],
    },
    paggination: { isPagging: false },
    isfloatingFilter: false,
    rowData: vunKeyFinancials.map((x) => ({
      ...x,
      TTM: x.TTM
        ? formatCellEitherMillionsOrPercentExcelDownload(
            x.entry_text,
            'EPS',
            x.TTM,
            false,
            true
          )
        : '',
      year_current: x.year_current
        ? formatCellEitherMillionsOrPercentExcelDownload(
            x.entry_text,
            'EPS',
            x.year_current,
            false,
            true
          )
        : '',
      year_minus_1: x.year_minus_1
        ? formatCellEitherMillionsOrPercentExcelDownload(
            x.entry_text,
            'EPS',
            x.year_minus_1,
            false,
            true
          )
        : '',
      year_minus_2: x.year_minus_2
        ? formatCellEitherMillionsOrPercentExcelDownload(
            x.entry_text,
            'EPS',
            x.year_minus_2,
            false,
            true
          )
        : '',
      year_minus_3: x.year_minus_3
        ? formatCellEitherMillionsOrPercentExcelDownload(
            x.entry_text,
            'EPS',
            x.year_minus_3,
            false,
            true
          )
        : '',
      year_minus_4: x.year_minus_4
        ? formatCellEitherMillionsOrPercentExcelDownload(
            x.entry_text,
            'EPS',
            x.year_minus_4,
            false,
            true
          )
        : '',
      TrialStatus,
      allowDownload,
    })),
  };

  const gridOptionsKeyRatios = {
    // immutableData: true,
    colDefsMedalsIncluded: [
      {
        headerName: 'Metric',
        field: 'entry_text',
        flex: 1,
        sortable: false,
        cellClass: (params) => {
          if (params.data.metric_id === METRIC_ID_HEADER) {
            return null;
          }
          return 'ws-normal-lh24 ps-1 pe-1';
        },
        autoHeight: true,
        minWidth: query.print ? 338 : 200,
        maxWidth: query.print ? 338 : null,
        colSpan: (params) => {
          if (params.data.metric_id === METRIC_ID_HEADER) {
            return KEYFIN_COL_SPAN;
          }
          return STAND_COL_SPAN;
        },
        cellRendererFramework: (params) => (
          <div>
            <IWidget tooltipOverrideString={params.data.info} />
            {params.data.entry_text}
          </div>
        ),
        cellStyle: (params) => {
          if (params.data.metric_id === METRIC_ID_HEADER) {
            return { fontWeight: 'bold' };
          }
          return null;
        },
      },
      {
        headerName: tickerName,
        field: 'TTM',
        sortable: false,
        minWidth: query.print ? 100 : 70,
        maxWidth: query.print ? 100 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        cellRendererFramework: (params) => params.data.TTM,
        colSpan: (params) => {
          if (params.data.metric_id === METRIC_ID_HEADER) {
            return KEYFIN_COL_SPAN;
          }
          return STAND_COL_SPAN;
        },
      },
      {
        headerName: 'Peer Group Median',
        field: 'PeerGroup',
        minWidth: query.print ? 100 : 130,
        maxWidth: query.print ? 100 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        sortable: false,
        cellRendererFramework: (params) =>
          checkValuesToFixed(params.data.PeerGroup),
      },
      {
        headerName: 'Health',
        field: 'Health1',
        minWidth: query.print ? 100 : 70,
        maxWidth: query.print ? 100 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small',
        sortable: false,
        cellRendererFramework: (params) =>
          DisplayFlagsByName(params.data.Health1),
      },
      {
        headerName: 'S&P 500 Median',
        field: 'SP500',
        type: 'rightAligned',
        minWidth: query.print ? 100 : 130,
        maxWidth: query.print ? 100 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        sortable: false,
        cellRendererFramework: (params) =>
          checkValuesToFixed(params.data.SP500),
      },
      {
        headerName: 'Health',
        field: 'Health2',
        minWidth: query.print ? 100 : 70,
        maxWidth: query.print ? 100 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small',
        sortable: false,
        cellRendererFramework: (params) =>
          DisplayFlagsByName(params.data.Health2),
      },
      {
        headerName: 'All Median',
        field: 'AllMed',
        minWidth: query.print ? 100 : 80,
        maxWidth: query.print ? 100 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small ag-right-aligned-cell',
        sortable: false,
        cellRendererFramework: (params) =>
          checkValuesToFixed(params.data.AllMed),
      },
      {
        headerName: 'Health',
        field: 'Health3',
        minWidth: query.print ? 100 : 70,
        maxWidth: query.print ? 100 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small',
        sortable: false,
        cellRendererFramework: (params) =>
          DisplayFlagsByName(params.data.Health3),
      },
    ],
    colDefsMedalsExcluded: [],
    headerHeight: 50,
    pinColumns: {
      isPinOption: true,
      columns: [
        {
          colId: 'entry_text',
          pinned: 'left',
        },
      ],
    },
    paggination: { isPagging: false },
    rowData:
      vunKeyRatiosHealth !== undefined &&
      vunKeyRatiosHealth.length > 0 &&
      vunKeyRatiosHealth.map((x) => ({
        ...x,
        TrialStatus,
        allowDownload,
      })),
  };

  const gridOptionsRecentFilings = {
    // immutableData: true,
    colDefsMedalsIncluded: [
      {
        headerName: 'Date',
        field: 'datetime',
        minWidth: 140,
        maxWidth: 140,
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small cell-line-wrap-text',
        cellRendererFramework: (params) => (
          <div>{dateToNull(params.data.datetime, 'dd-mmm-yy', true)}</div>
        ),
      },
      {
        headerName: 'Filing',
        field: 'filing_type',
        minWidth: query.print ? 500 : 400,
        maxWidth: query.print ? 500 : null,
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small',
        cellRendererFramework: (params) => <div>{params.data.filing_type}</div>,
      },
      {
        headerName: 'Link',
        field: 'url',
        minWidth: query.print ? 400 : 400,
        maxWidth: query.print ? 400 : null,
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 font-size-small'
          : 'ws-normal-lh24 ps-1 pe-1 font-size-small',
        cellRendererFramework: (params) => (
          <div>
            <a
              className='link-primary text-secondary'
              href={params.data.url}
              target='_blank'
              rel='noopener noreferrer'
            >
              View
            </a>
          </div>
        ),
      },
    ],
    colDefsMedalsExcluded: [],
    pinColumns: {
      isPinOption: false,
      columns: [
        {
          colId: 'entry_text',
          pinned: 'left',
        },
      ],
    },
    paggination: { isPagging: false },
    isfloatingFilter: false,
    rowData:
      aivRecentFilings !== undefined &&
      aivRecentFilings.map((x) => ({
        ...x,
        TrialStatus,
        allowDownload,
      })),
  };

  const gridOptionsSPPVert = {
    immutableData: true,
    colDefsMedalsIncluded: [
      {
        headerName: '',
        field: 'row_heading',
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-left-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-left-aligned-cell',
        minWidth: query.print ? 250 : 120,
        maxWidth: query.print ? 250 : null,
        cellRendererFramework: (params) => <b>{params.data.row_heading}</b>,
      },
      {
        headerName: 'Current Price',
        field: 'VCurr',
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: query.print ? 100 : 100,
        maxWidth: query.print ? 100 : null,
        cellRendererFramework: (params) =>
          checkValuesToFixed(params.data.VCurr),
      },
      {
        headerName: '12 Month High',
        field: 'V12MHigh',
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: 90,
        maxWidth: query.print ? 90 : null,
        cellRendererFramework: (params) =>
          checkValuesToFixed(params.data.V12MHigh),
      },
      {
        headerName: '12 Month Low',
        field: 'V12MLow',
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: 90,
        maxWidth: query.print ? 90 : null,
        cellRendererFramework: (params) =>
          checkValuesToFixed(params.data.V12MLow),
      },
      {
        headerName: '-1 Months',
        field: 'V1M',
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: 80,
        maxWidth: query.print ? 80 : null,
        cellRendererFramework: (params) =>
          params.rowIndex === NUMBER_ONE && params.data.V1M !== ''
            ? `${params.data.V1M}`
            : params.data.V1M.slice(0, -1),
        cellClassRules: {
          redFont: (params) =>
            params.node.rowIndex === NUMBER_ONE &&
            params.data.V1M.slice(0, -1) < 0,
          greenFont: (params) =>
            params.node.rowIndex === NUMBER_ONE &&
            params.data.V1M.slice(0, -1) > 0,
        },
        cellStyle: (params) =>
          params.node.rowIndex === NUMBER_ONE &&
          params.data.V1M !== '' &&
          setCellStyleFinancial(params.data.V1M.slice(0, -1)),
      },
      {
        headerName: '-3 Months',
        field: 'V3M',
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: 80,
        maxWidth: query.print ? 80 : null,
        cellRendererFramework: (params) =>
          params.rowIndex === NUMBER_ONE && params.data.V3M !== ''
            ? `${params.data.V3M}`
            : params.data.V3M.slice(0, -1),
        cellClassRules: {
          redFont: (params) =>
            params.node.rowIndex === NUMBER_ONE &&
            params.data.V3M.slice(0, -1) < 0,
          greenFont: (params) =>
            params.node.rowIndex === NUMBER_ONE &&
            params.data.V3M.slice(0, -1) > 0,
        },
        cellStyle: (params) =>
          params.node.rowIndex === NUMBER_ONE &&
          params.data.V3M !== '' &&
          setCellStyleFinancial(params.data.V3M.slice(0, -1)),
      },
      {
        headerName: '-6 Months',
        field: 'V6M',
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: 80,
        maxWidth: query.print ? 80 : null,
        cellRendererFramework: (params) =>
          params.rowIndex === NUMBER_ONE && params.data.V6M !== ''
            ? `${params.data.V6M}`
            : params.data.V6M.slice(0, -1),
        cellClassRules: {
          redFont: (params) =>
            params.node.rowIndex === NUMBER_ONE &&
            params.data.V6M.slice(0, -1) < 0,
          greenFont: (params) =>
            params.node.rowIndex === NUMBER_ONE &&
            params.data.V6M.slice(0, -1) > 0,
        },
        cellStyle: (params) =>
          params.node.rowIndex === NUMBER_ONE &&
          params.data.V6M !== '' &&
          setCellStyleFinancial(params.data.V6M.slice(0, -1)),
      },
      {
        headerName: '-12 Months',
        field: 'V1Y',
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: 80,
        maxWidth: query.print ? 80 : null,
        cellRendererFramework: (params) =>
          params.rowIndex === NUMBER_ONE && params.data.V1Y !== ''
            ? `${params.data.V1Y}`
            : params.data.V1Y.slice(0, -1),
        cellClassRules: {
          redFont: (params) =>
            params.node.rowIndex === NUMBER_ONE &&
            params.data.V1Y.slice(0, -1) < 0,
          greenFont: (params) =>
            params.node.rowIndex === NUMBER_ONE &&
            params.data.V1Y.slice(0, -1) > 0,
        },
        cellStyle: (params) =>
          params.node.rowIndex === NUMBER_ONE &&
          params.data.V1Y !== '' &&
          setCellStyleFinancial(params.data.V1Y.slice(0, -1)),
      },
      {
        headerName: '-2 Years',
        field: 'V2Y',
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: 80,
        maxWidth: query.print ? 80 : null,
        cellRendererFramework: (params) =>
          params.rowIndex === NUMBER_ONE && params.data.V2Y !== ''
            ? `${params.data.V2Y}`
            : params.data.V2Y.slice(0, -1),
        cellClassRules: {
          redFont: (params) =>
            params.node.rowIndex === NUMBER_ONE &&
            params.data.V2Y.slice(0, -1) < 0,
          greenFont: (params) =>
            params.node.rowIndex === NUMBER_ONE &&
            params.data.V2Y.slice(0, -1) > 0,
        },
        cellStyle: (params) =>
          params.node.rowIndex === NUMBER_ONE &&
          params.data.V2Y !== '' &&
          setCellStyleFinancial(params.data.V2Y.slice(0, -1)),
      },
      {
        headerName: '-3 Years',
        field: 'V3Y',
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: query.print ? 110 : 80,
        maxWidth: query.print ? 110 : null,
        cellRendererFramework: (params) =>
          params.rowIndex === NUMBER_ONE && params.data.V3Y !== ''
            ? `${params.data.V3Y}`
            : params.data.V3Y.slice(0, -1),
        cellClassRules: {
          redFont: (params) =>
            params.node.rowIndex === NUMBER_ONE &&
            params.data.V3Y.slice(0, -1) < 0,
          greenFont: (params) =>
            params.node.rowIndex === NUMBER_ONE &&
            params.data.V3Y.slice(0, -1) > 0,
        },
        cellStyle: (params) =>
          params.node.rowIndex === NUMBER_ONE &&
          params.data.V3Y !== '' &&
          setCellStyleFinancial(params.data.V3Y.slice(0, -1)),
      },
    ],
    colDefsMedalsExcluded: [],
    pinColumns: {
      isPinOption: false,
      columns: [
        {
          colId: 'entry_text',
          pinned: 'left',
        },
      ],
    },
    paggination: { isPagging: false },
    isfloatingFilter: false,
    rowData: buildFinancialSPPTableHorizonatal(vunSPP).map((x) => ({
      ...x,
      TrialStatus,
      allowDownload: true,
      V3Y:
        x.V3Y !== undefined && x.V3Y !== null && x.V3Y !== ''
          ? `${parseFloat(x.V3Y).toFixed(1)}%`
          : '',
      V2Y:
        x.V2Y !== undefined && x.V2Y !== null && x.V2Y !== ''
          ? `${parseFloat(x.V2Y).toFixed(1)}%`
          : '',
      V1Y:
        x.V2Y !== undefined && x.V1Y !== null && x.V1Y !== ''
          ? `${parseFloat(x.V1Y).toFixed(1)}%`
          : '',
      V6M:
        x.V6M !== undefined && x.V6M !== null && x.V6M !== ''
          ? `${parseFloat(x.V6M).toFixed(1)}%`
          : '',
      V3M:
        x.V3M !== undefined && x.V3M !== null && x.V3M !== ''
          ? `${parseFloat(x.V3M).toFixed(1)}%`
          : '',
      V1M:
        x.V1M !== undefined && x.V1M !== null && x.V1M !== ''
          ? `${parseFloat(x.V1M).toFixed(1)}%`
          : '',
    })),
  };

  const gridOptionsSPP = {
    immutableData: true,
    colDefsMedalsIncluded: [
      {
        headerName: 'Price Period',
        field: 'key',
        flex: 1,
        colSpan: (params) => {
          if (params.data.key === null) {
            return SHPPER_COL_SPAN;
          }
          return STAND_COL_SPAN;
        },
        cellRendererFramework: (params) => <div>{params.data.key}</div>,
      },
      {
        headerName: 'Share Price',
        field: 'value',
        type: 'rightAligned',
        flex: 1,
        cellRendererFramework: (params) => (
          <div>{checkValuesToFixed(params.data.value)}</div>
        ),
      },
      {
        headerName: '%',
        field: 'value2',
        type: 'rightAligned',
        flex: 1,
        ...gridWidthValuesSml,
        cellRendererFramework: (params) => (
          <div>{checkValuesToFixed(params.data.value2)}</div>
        ),
        cellStyle: (params) => setCellStyleFinancial(params.data.value2),
      },
    ],
    colDefsMedalsExcluded: [],
    pinColumns: {
      isPinOption: false,
      columns: [
        {
          colId: 'entry_text',
          pinned: 'left',
        },
      ],
    },
    paggination: { isPagging: false },
    isfloatingFilter: false,
    rowData: buildFinancialSPPTable(vunSPP, '').map((x) => ({
      ...x,
      TrialStatus,
      allowDownload,
    })),
  };

  // Top 10 Holders
  const gridOptionsOwnership_top_10_holders = {
    immutableData: true,
    colDefsMedalsIncluded: [
      {
        headerName: 'Investor',
        field: 'filer_name',
        sortable: false,
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1'
          : 'ws-normal-lh24 ps-1 pe-1',
        minWidth: query.print ? 500 : 130,
        maxWidth: query.print ? 500 : null,
      },
      {
        headerName: 'As at:',
        field: 'period_of_report',
        sortable: false,
        minWidth: query.print ? 100 : 80,
        maxWidth: query.print ? 100 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 text-center'
          : 'ws-normal-lh24 ps-1 pe-1 text-center',
      },
      {
        headerName: 'Shares Reported',
        field: 'shares',
        sortable: false,
        minWidth: query.print ? 110 : 87,
        maxWidth: query.print ? 110 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
      },
      {
        headerName: 'Current (%)',
        field: 'pcent_held',
        sortable: false,
        minWidth: query.print ? 100 : 75,
        maxWidth: query.print ? 100 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
      },
      {
        headerName: "Value ($000's)",
        field: 'value',
        sortable: false,
        minWidth: query.print ? 110 : 80,
        maxWidth: query.print ? 110 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
      },
      {
        headerName: 'Level of Activism',
        field: 'focused_type',
        sortable: false,
        autoHeight: true,
        minWidth: query.print ? 125 : 100,
        maxWidth: query.print ? 125 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1'
          : 'ws-normal-lh24 ps-1 pe-1',
      },
    ],
    colDefsMedalsExcluded: [],
    pinColumns: {
      isPinOption: true,
      columns: [
        {
          colId: 'filer_name',
          pinned: 'left',
        },
      ],
    },
    isfloatingFilter: false,
    paggination: { isPagging: !query.print, pageSize: 10 },
    rowData: engagement.map((x) => ({
      ...x,
      period_of_report:
        x.period_of_report !== null || x.period_of_report !== ''
          ? dateToNull(x.period_of_report, 'dd-mmm-yy', true)
          : '',
      value: x.value
        ? formatCellEitherMillionsOrPercentExcelDownload(
            'value',
            false,
            x.value,
            false
          )
        : '',
      shares: x.shares
        ? formatCellEitherMillionsOrPercentExcelDownload(
            'shares',
            false,
            x.shares,
            false
          )
        : '',
      pcent_held:
        x.pcent_held !== null || x.pcent_held !== ''
          ? checkValuesToFixed(x.pcent_held)
          : '',
      TrialStatus,
      allowDownload,
    })),
  };

  // Activist Investors
  const gridOptionsOwnershipActivistInvestors = {
    immutableData: true,
    colDefsMedalsIncluded: [
      {
        headerName: 'Investor',
        field: 'filer_name',
        sortable: false,
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1'
          : 'ws-normal-lh24 ps-1 pe-1',
        minWidth: query.print ? 500 : 120,
        maxWidth: query.print ? 500 : null,
      },
      {
        headerName: 'As at:',
        field: 'period_of_report',
        flex: 1,
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 text-center'
          : 'ws-normal-lh24 ps-1 pe-1 text-center',
        minWidth: query.print ? 100 : 70,
        maxWidth: query.print ? 100 : null,
      },
      {
        headerName: 'Shares Reported',
        field: 'shares',
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: query.print ? 110 : 90,
        maxWidth: query.print ? 110 : null,
      },
      {
        headerName: 'Current (%)',
        field: 'pcent_held',
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: query.print ? 100 : 70,
        maxWidth: query.print ? 100 : null,
      },
      {
        headerName: "Value ($000's)",
        field: 'value',
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: query.print ? 110 : 80,
        maxWidth: query.print ? 110 : null,
      },
      {
        headerName: 'Level of Activism',
        field: 'focused_type',
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1'
          : 'ws-normal-lh24 ps-1 pe-1',
        minWidth: query.print ? 120 : 80,
        maxWidth: query.print ? 120 : null,
      },
    ],
    colDefsMedalsExcluded: [],
    pinColumns: {
      isPinOption: true,
      columns: [
        {
          colId: 'filer_name',
          pinned: 'left',
        },
      ],
    },
    paggination: { isPagging: !query.print, pageSize: 10 },
    isfloatingFilter: false,
    rowData: activistInvestors.map((x) => ({
      ...x,
      period_of_report:
        x.period_of_report !== null || x.period_of_report !== ''
          ? dateToNull(x.period_of_report, 'dd-mmm-yy', true)
          : '',
      shares: x.shares
        ? formatCellEitherMillionsOrPercentExcelDownload(
            'shares',
            false,
            x.shares,
            false
          )
        : '',
      pcent_held:
        x.pcent_held !== null || x.pcent_held !== ''
          ? checkValuesToFixed(x.pcent_held)
          : '',
      value: x.value
        ? formatCellEitherMillionsOrPercentExcelDownload(
            'value',
            false,
            x.value,
            false
          )
        : '',
      TrialStatus,
      allowDownload,
    })),
  };

  // Activism Summary
  const gridOptionsOwnershipActivistSummary = {
    immutableData: true,
    colDefsMedalsIncluded: [
      {
        headerName: 'Date',
        field: 'summary_date',
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 text-center'
          : 'ws-normal-lh24 ps-1 pe-1 text-center',
        minWidth: 100,
        maxWidth: 100,
      },
      {
        headerName: 'Summary',
        field: 'summary_text',
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1'
          : 'ws-normal-lh24 ps-1 pe-1',
        minWidth: 938,
        maxWidth: query.print ? 938 : null,
      },
    ],
    colDefsMedalsExcluded: [],
    pinColumns: {
      isPinOption: false,
      columns: [
        {
          colId: 'activist_name',
          pinned: 'left',
        },
      ],
    },
    paggination: { isPagging: !query.print, pageSize: 20 },
    isfloatingFilter: false,
    rowData: activismSummary.map((x) => ({
      ...x,
      summary_date:
        x.summary_date !== null || x.summary_date !== ''
          ? dateToNull(x.summary_date, 'dd-mmm-yy', true)
          : '',
      TrialStatus,
      allowDownload,
    })),
  };

  // AGM Voting Results
  const gridOptionsOwnershipVoting = {
    immutableData: true,
    colDefsMedalsIncluded: [
      {
        headerName: 'No.',
        field: 'proposal_number_orig',
        sortable: false,
        minWidth: 60,
        maxWidth: query.print ? 60 : null,
      },
      {
        headerName: 'Proposal Detail',
        field: 'proposal_detail',
        minWidth: 170,
        maxWidth: query.print ? 170 : null,
        sortable: false,
        autoHeight: true,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1'
          : 'ws-normal-lh24 ps-1 pe-1',
      },
      {
        headerName: 'Sponsor',
        field: 'sponsor',
        sortable: false,
        autoHeight: true,
        minWidth: 60,
        maxWidth: query.print ? 60 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
      },
      {
        headerName: "For (000's)",
        field: 'for_shares',
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        minWidth: 100,
        maxWidth: query.print ? 120 : null,
        cellRendererFramework: (params) => (
          <span>{params.data.for_shares}</span>
        ),
      },
      {
        headerName: 'For (%)',
        field: 'for_pcent',
        minWidth: query.print ? 60 : 85,
        maxWidth: query.print ? 60 : null,
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        cellRendererFramework: (params) => <span>{params.data.for_pcent}</span>,
      },
      {
        headerName: "Against (000's)",
        field: 'against_shares',
        minWidth: query.print ? 110 : 100,
        maxWidth: query.print ? 110 : null,
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        cellRendererFramework: (params) => (
          <span>{params.data.against_shares}</span>
        ),
      },
      {
        headerName: 'Against (%)',
        field: 'against_pcent',
        minWidth: query.print ? 60 : 90,
        maxWidth: query.print ? 60 : null,
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        cellRendererFramework: (params) => (
          <span>{params.data.against_pcent}</span>
        ),
      },
      {
        headerName: "Witheld/Abstained (000's)",
        field: 'abstain_shares',
        minWidth: 110,
        maxWidth: query.print ? 110 : null,
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        cellRendererFramework: (params) => (
          <span>{params.data.abstain_shares}</span>
        ),
      },
      {
        headerName: 'Witheld/Abstained (%)',
        field: 'abstain_pcent',
        sortable: false,
        minWidth: query.print ? 80 : 100,
        maxWidth: query.print ? 80 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        cellRendererFramework: (params) => (
          <span>{params.data.abstain_pcent}</span>
        ),
      },
      {
        headerName: "Broker Non-Votes (000's)",
        field: 'broker_shares',
        sortable: false,
        minWidth: 110,
        maxWidth: query.print ? 110 : null,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        cellRendererFramework: (params) => (
          <span>{params.data.broker_shares}</span>
        ),
      },
      {
        headerName: 'Broker Non-Votes (%)',
        field: 'broker_pcent',
        minWidth: 120,
        maxWidth: query.print ? 120 : null,
        sortable: false,
        cellClass: TrialStatus
          ? 'ws-normal-lh24 ag-cell-blurrytext ps-1 pe-1 ag-right-aligned-cell'
          : 'ws-normal-lh24 ps-1 pe-1 ag-right-aligned-cell',
        cellRendererFramework: (params) => (
          <span>{params.data.broker_pcent}</span>
        ),
      },
    ],
    headerHeight: 60,
    colDefsMedalsExcluded: [],
    pinColumns: {
      isPinOption: false,
      columns: [
        {
          colId: 'voting_name',
          pinned: 'left',
        },
      ],
    },
    paggination: { isPagging: false, pageSize: 20 },
    isfloatingFilter: false,
    rowData: recentVotingResults.map((x) => ({
      ...x,
      for_shares: x.for_shares
        ? formatCellEitherMillionsOrPercentExcelDownload(
            'for_shares',
            false,
            x.for_shares,
            false
          )
        : '',
      for_pcent: x.for_pcent ? checkValuesToFixed(x.for_pcent) : '',
      against_shares: x.against_shares
        ? formatCellEitherMillionsOrPercentExcelDownload(
            'against_shares',
            false,
            x.against_shares,
            false
          )
        : '',
      against_pcent: x.against_pcent ? checkValuesToFixed(x.against_pcent) : '',
      abstain_shares: x.abstain_shares
        ? formatCellEitherMillionsOrPercentExcelDownload(
            'abstain_shares',
            false,
            x.abstain_shares,
            false
          )
        : '',
      abstain_pcent: x.abstain_pcent ? checkValuesToFixed(x.abstain_pcent) : '',
      broker_shares: x.broker_shares
        ? formatCellEitherMillionsOrPercentExcelDownload(
            'broker_shares',
            false,
            Number(x.broker_shares),
            false
          )
        : '',
      broker_pcent: x.broker_pcent ? checkValuesToFixed(x.broker_pcent) : '',
      TrialStatus,
      allowDownload,
    })),
  };

  // Voting  Footer
  const VotingFooter = () => {
    const res = directorMedian[0];
    // if meeting date is more than 1 year of current date get data from
    const remunerationOneYear_data = votingRemunerationOneYearBack[0];
    // otherwise get data from
    const remuneration_data = votingRemuneration[0];

    // calculate whether last meeting date is more than one year
    const lastmeetingDate = new Date(meetingDate).getTime();
    const todaysDate = Date.now();
    const durationSinceLastMeeting = todaysDate - lastmeetingDate;

    if (!res || res === 'undefined') {
      return null;
    }

    // if meeting date is more than 1 year of current date
    if (durationSinceLastMeeting > YEAR_IN_MILLISECONDS) {
      if (
        typeof (
          directorMedian &&
          remunerationOneYear_data &&
          remuneration_data
        ) !== 'undefined'
      ) {
        return [
          <div className='row pdfpagebreak' key={13}>
            <div className='col-12 col-md-6 mb-2 pb-0'>
              <FooterCard
                title='Minimum Vote in Favour of Directors'
                textHeader='Number'
                TrialUser={TrialStatus}
                companyName={
                  vunDirectorCompany !== undefined &&
                  vunDirectorCompany.Company_name
                }
                companyNumber={res.VFDAct}
                arrMedianJSON={[
                  {
                    peerName: 'Peer Group',
                    peerNumber: checkValuesToFixed(res.VFDMedPG),
                    peerHealth: DisplayFlagsByName(vunVotingHealth.directSupPG),
                  },
                  {
                    peerName: 'S&P 500',
                    peerNumber: checkValuesToFixed(res.VFDMedSP),
                    peerHealth: DisplayFlagsByName(vunVotingHealth.directSupSP),
                  },
                  {
                    peerName: 'All Companies',
                    peerNumber: checkValuesToFixed(res.VFDMedAC),
                    peerHealth: DisplayFlagsByName(
                      vunVotingHealth.directSupAll
                    ),
                  },
                ]}
              />
            </div>
            <div className='col-12 col-md-6 mb-2 pb-0'>
              <FooterCard
                title='Minimum Vote in Favour of Remuneration'
                textHeader='Number'
                TrialUser={TrialStatus}
                companyName={
                  vunDirectorCompany !== undefined &&
                  vunDirectorCompany.Company_name
                }
                companyNumber={remunerationOneYear_data.VFRAct}
                arrMedianJSON={[
                  {
                    peerName: 'Peer Group',
                    peerNumber: checkValuesToFixed(
                      remunerationOneYear_data.VFRMedPG
                    ),
                    peerHealth: DisplayFlagsByName(vunVotingHealth.renumSupPG),
                  },
                  {
                    peerName: 'S&P 500',
                    peerNumber: checkValuesToFixed(
                      remunerationOneYear_data.VFRMedSP
                    ),
                    peerHealth: DisplayFlagsByName(vunVotingHealth.renumSupSP),
                  },
                  {
                    peerName: 'All Companies',
                    peerNumber: checkValuesToFixed(
                      remunerationOneYear_data.VFRMedAC
                    ),
                    peerHealth: DisplayFlagsByName(vunVotingHealth.renumSupAll),
                  },
                ]}
              />
            </div>
          </div>,
        ];
      }
    }
    return [
      <div className='row pdfpagebreak' key={13}>
        <div className='col-12 col-md-6 mb-2 pb-0'>
          <FooterCard
            title='Minimum Vote in Favour of Directors'
            textHeader='Number'
            TrialUser={TrialStatus}
            companyName={
              vunDirectorCompany !== undefined &&
              vunDirectorCompany.Company_name
            }
            companyNumber={res.VFDAct}
            arrMedianJSON={[
              {
                peerName: 'Peer Group',
                peerNumber: checkValuesToFixed(res.VFDMedPG),
                peerHealth: DisplayFlagsByName(vunVotingHealth.directSupPG),
              },
              {
                peerName: 'S&P 500',
                peerNumber: checkValuesToFixed(res.VFDMedSP),
                peerHealth: DisplayFlagsByName(vunVotingHealth.directSupSP),
              },
              {
                peerName: 'All Companies',
                peerNumber: checkValuesToFixed(res.VFDMedAC),
                peerHealth: DisplayFlagsByName(vunVotingHealth.directSupAll),
              },
            ]}
          />
        </div>
        <div className='col-12 col-md-6 mb-2 pb-0'>
          <FooterCard
            title='Minimum Vote in Favour of Remuneration'
            textHeader='Number'
            TrialUser={TrialStatus}
            companyName={
              vunDirectorCompany !== undefined &&
              vunDirectorCompany.Company_name
            }
            companyNumber={remuneration_data.VFRAct}
            arrMedianJSON={[
              {
                peerName: 'Peer Group',
                peerNumber: checkValuesToFixed(remuneration_data.VFRMedPG),
                peerHealth: DisplayFlagsByName(vunVotingHealth.renumSupPG),
              },
              {
                peerName: 'S&P 500',
                peerNumber: checkValuesToFixed(remuneration_data.VFRMedSP),
                peerHealth: DisplayFlagsByName(vunVotingHealth.renumSupSP),
              },
              {
                peerName: 'All Companies',
                peerNumber: checkValuesToFixed(remuneration_data.VFRMedAC),
                peerHealth: DisplayFlagsByName(vunVotingHealth.renumSupAll),
              },
            ]}
          />
        </div>
      </div>,
    ];
  };

  const GovernanceCards = () => (
    <>
      <div className='row heightZero'>
        <div className='col-lg-12 mb-2 pb-0'>
          <a
            className='text-secondary'
            name='Governance'
            alt='Governance'
            href='#Governance'
          >
            <span className=' sr-only sr-only-focusable' />
          </a>
          {/* <h2>Governance</h2> */}
        </div>
      </div>
      <div className='row'>
        <div className='col-12 col-md-4 m-0 mb-2 pb-0'>
          <ErrorBoundary hasCard cardtitle='Directors on Board'>
            <FooterCard
              title='Directors on Board'
              textHeader='Number'
              TrialUser={TrialStatus}
              companyName={
                vunDirectorCompany !== undefined &&
                vunDirectorCompany.Company_name
              }
              companyNumber={vunDirectorCompany.No_of_directors}
              arrMedianJSON={[
                {
                  peerName: 'Peer Group',
                  peerNumber: vunDirectorPeerGroup.No_of_directors,
                  peerHealth: DisplayFlagsByName(
                    vunDirectorsHealth.directNumPG
                  ),
                },
                {
                  peerName: 'S&P 500',
                  peerNumber: vunDirectorSP500.No_of_directors,
                  peerHealth: DisplayFlagsByName(
                    vunDirectorsHealth.directNumSP
                  ),
                },
                {
                  peerName: 'All Companies',
                  peerNumber: vunDirectorAllCompanies.No_of_directors,
                  peerHealth: DisplayFlagsByName(
                    vunDirectorsHealth.directNumAll
                  ),
                },
              ]}
            />
          </ErrorBoundary>
        </div>
        <div className='col-12 col-md-4 m-0 mb-2 pb-0'>
          <ErrorBoundary hasCard cardtitle='Longest Tenure'>
            <FooterCard
              title='Longest Tenure'
              textHeader='Number'
              TrialUser={TrialStatus}
              companyName={
                vunDirectorCompany !== undefined &&
                vunDirectorCompany.Company_name
              }
              companyNumber={vunDirectorCompany.Longest_tenure}
              arrMedianJSON={[
                {
                  peerName: 'Peer Group',
                  peerNumber: vunDirectorPeerGroup.Longest_tenure,
                  peerHealth: DisplayFlagsByName(
                    vunDirectorsHealth.directTenPG
                  ),
                },
                {
                  peerName: 'S&P 500',
                  peerNumber: vunDirectorSP500.Longest_tenure,
                  peerHealth: DisplayFlagsByName(
                    vunDirectorsHealth.directTenSP
                  ),
                },
                {
                  peerName: 'All Companies',
                  peerNumber: vunDirectorAllCompanies.Longest_tenure,
                  peerHealth: DisplayFlagsByName(
                    vunDirectorsHealth.directTenAll
                  ),
                },
              ]}
            />
          </ErrorBoundary>
        </div>
        <div className='col-12 col-md-4 m-0 mb-2 pb-0'>
          <ErrorBoundary hasCard cardtitle='Oldest Director'>
            <FooterCard
              title='Oldest Director'
              textHeader='Number'
              TrialUser={TrialStatus}
              companyName={
                vunDirectorCompany !== undefined &&
                vunDirectorCompany.Company_name
              }
              companyNumber={vunDirectorCompany.Oldest_director}
              arrMedianJSON={[
                {
                  peerName: 'Peer Group',
                  peerNumber: vunDirectorPeerGroup.Oldest_director,
                  peerHealth: DisplayFlagsByName(
                    vunDirectorsHealth.directAgePG
                  ),
                },
                {
                  peerName: 'S&P 500',
                  peerNumber: vunDirectorSP500.Oldest_director,
                  peerHealth: DisplayFlagsByName(
                    vunDirectorsHealth.directAgeSP
                  ),
                },
                {
                  peerName: 'All Companies',
                  peerNumber: vunDirectorAllCompanies.Oldest_director,
                  peerHealth: DisplayFlagsByName(
                    vunDirectorsHealth.directAgeAll
                  ),
                },
              ]}
            />
          </ErrorBoundary>
        </div>
      </div>
    </>
  );

  function getCompanySumarryTable() {
    return (
      <ErrorBoundary hasCard cardtitle='Company Summary'>
        <Table
          addedClass='pdfpb-30'
          gridOptions={gridOptionsCompanySummary}
          title='Company Summary'
          hideExcelDownloadIcon={TrialUserDisableDownload}
        />
      </ErrorBoundary>
    );
  }
  function getKeyRatioTable() {
    return (
      <ErrorBoundary hasCard cardtitle='Key Ratios'>
        <Table
          addedClass='pdfpb-30'
          gridOptions={gridOptionsKeyRatios}
          title='Key Ratios'
          hideExcelDownloadIcon={TrialUserDisableDownload}
        />
      </ErrorBoundary>
    );
  }
  function getKeyFinancialTable() {
    return (
      <ErrorBoundary hasCard cardtitle='Key Financials'>
        <Table
          addedClass='pdfpb-30'
          gridOptions={gridOptionsKeyFinancials}
          title='Key Financials'
          hideExcelDownloadIcon={TrialUserDisableDownload}
        />
      </ErrorBoundary>
    );
  }

  function getPercentileRankingChart() {
    return (
      <ErrorBoundary hasCard cardtitle='Historical Percentile Ranking'>
        <D3LineChart
          cardtitle='Historical Percentile Ranking'
          lineData={VulnerabilityPrankOverTime}
          xAxisKey='thedate'
          yAxisKey='median'
          xAxisTitle='Date'
          yAxisTitle='Score'
          isGradient={true}
          TrialUser={TrialStatus}
        />
      </ErrorBoundary>
    );
  }
  function getVulnerabilityScoreChart() {
    return (
      <ErrorBoundary hasCard cardtitle='Historical Vulnerability Score'>
        <D3LineChart
          cardtitle='Historical Vulnerability Score'
          lineData={VulnerabilityScoreOverTime}
          xAxisKey='thedate'
          yAxisKey='median'
          xAxisTitle='Date'
          yAxisTitle='Score'
          TrialUser={TrialStatus}
          maxValueY
        />
      </ErrorBoundary>
    );
  }

  React.useEffect(() => {
    if (!isLoadingData) {
      setTimeout(() => {
        const doc = document.getElementById('loadItem');
        const loadedItem = document.createElement('div');
        doc && doc.appendChild(loadedItem);
        loadedItem.setAttribute('id', 'loadedItem');
      }, 1000);
    }
  }, [isLoadingData]);

  return (
    <Page
      {...{
        location,
        TrialStatus,
        aivPIGetIssuer,
        allowDownload,
        rowData,
      }}
      key={11}
      className={bem.b('pt-0 pb-2')}
    >
      {props.peerGroupDefaultName ? (
        <>
          <Companyandinvestorfilter
            {...props}
            isShowInvestorSelection={false}
            customCompanyBtnName='By Custom Peer Group'
            customCompanyLabelName={props.peerGroupDefaultName}
            isActivistVulnerability
          />
          <span style={{ margin: 0, fontSize: '0.8rem', color: 'black' }}>
            Peer group only includes companies in our Vulnerability universe of
            companies. Companies selected that are not in the Vulnerability
            universe will not be included
          </span>
        </>
      ) : (
        ''
      )}
      {isLoadingData ? (
        <div>{LOADING}</div>
      ) : (
        <>
          <div className='fadeInAnimation' id='loadItem'>
            <PeerGroupComponent
              title='Current Peer Group'
              lstPeerGroup={props.lstCompanyPeerGroup}
              lstOriginalData={props.lstOriginalData}
              handleResetCompanyTitle={props.handleResetCompanyTitle}
              handleResetBreadcrumbs={props.handleResetBreadcrumbs}
              handleResetCompanyPath={props.handleResetCompanyPath}
              location={location}
              indexID={indexID}
              setIndex={setIndex}
            />
            {vunCompanySummary && vunCompanySummary.length > ARRAY_LOWEST_VALUE &&
              vunSummaryScoreData !== undefined && (
                <div className='row'>
                  <div className='col-md-12 col-lg-6 mb-2 pb-0'>
                    <div className='row'>
                      <div className='col-12 mb-2 pb-0 pt-0'>
                        <Card title='Vulnerability Score'>
                          <div className='col-12 mb-2 pb-0'>
                            <div
                              className='row'
                              style={{ height: query.print ? '500px' : '' }}
                            >
                              <div
                                className={
                                  TrialUser
                                    ? 'blurrytext col-md-6 col-12 m-0'
                                    : 'col-md-6 col-12 m-0'
                                }
                              >
                                <span
                                  className='text-primary'
                                  style={{ whiteSpace: 'pre-line' }}
                                >
                                  Score : {vunSummaryScoreData.score_data}
                                </span>
                                <br />
                                <span
                                  className='text-primary'
                                  style={{ whiteSpace: 'pre-line' }}
                                >
                                  {`Percentile Rank : ${Math.round(
                                    vunSummaryScoreData.score
                                  )} % (${vunSummaryScoreData.ranking})`}
                                </span>
                                <br />
                                <span
                                  className='text-primary'
                                  style={{ whiteSpace: 'pre-line' }}
                                >
                                  Financials as at :
                                  {dateToNull(maxEndDate, 'dd-mmm-yy', true)}
                                </span>
                                <br />
                                <span
                                  className='text-primary'
                                  style={{ whiteSpace: 'pre-line' }}
                                >
                                  Activist In Play :
                                  {activistInPlay ? 'Yes' : 'No'}
                                </span>
                              </div>
                              <div className='col-md-4 col-12'>
                                <ErrorBoundary>
                                  <D3DoughnutChart
                                    isHide={false}
                                    isShowCard={false}
                                    cardtitle=''
                                    cardsmalltitle=''
                                    data={vunSummaryScoreData}
                                    height={query.print ? 400 : 150}
                                    isShowPercentage
                                    isMoreWorse={true}
                                    TrialUser={TrialStatus}
                                  />
                                </ErrorBoundary>
                              </div>
                            </div>
                          </div>
                        </Card>
                      </div>
                      {!query.print && (
                        <>
                          <div
                            className='col-12 mb-2 pt-1'
                            style={{ height: query.print ? '580px' : '' }}
                          >
                            {toggleChart
                              ? getPercentileRankingChart()
                              : getVulnerabilityScoreChart()}
                          </div>
                          <div className='row text-center mx-2'>
                            <button
                              type='button'
                              className='btn btn-primary w-50'
                              onClick={handleToggleChart}
                            >
                              {toggleChart
                                ? 'Show Historical Score'
                                : 'Show Historical Percentile Ranking'}
                            </button>
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                  {!query.print && (
                    <div className='col-md-12 col-lg-6 mb-2 pb-0'>
                      {getCompanySumarryTable()}
                    </div>
                  )}
                </div>
              )}

            {query.print && (
              <>
                <div className='row'>
                  <div className='col-md-12 col-lg-12 mb-2 pb-0'>
                    {getCompanySumarryTable()}
                  </div>
                </div>
                <div className='row pdfpagebreak'>
                  <div className='col-md-12 col-lg-12 mb-2 pb-0'>
                    {getPercentileRankingChart()}
                  </div>
                </div>
                <div className='row pdfpagebreak'>
                  <div className='col-md-12 col-lg-12 mb-2 pb-0'>
                    {getVulnerabilityScoreChart()}
                  </div>
                </div>
              </>
            )}
            {vunReport && vunReport.length > ARRAY_LOWEST_VALUE && (
              <>
                <div className='row'>
                  <div className={bemNews.b('col-12')}>
                    <Card title='Vulnerability Report'>
                      <div className='col-12 mb-2 pb-0'>
                        <ErrorBoundary>
                          <MultiNewsComponent
                            hash={vunReport}
                            newsIds={vunReportIDs}
                            newsDetailsArray={newsDetailsArray}
                            isOpenedOn={isOpenedOn}
                            setIsOpenedOn={setIsOpenedOn}
                            setNewsDetailsArray={setNewsDetailsArray}
                            loadedIds={loadedIds}
                            setLoadedIds={setLoadedIds}
                            topIndex={0}
                            staticPathConst={staticPathConsts}
                            articleID={articleID}
                            setArticleID={setArticleID}
                            newsDetailsLocation={newsDetailsLocation}
                            isVunReport={isVunReport}
                            setNewsDetailsLocation={setNewsDetailsLocation}
                            articleMode={articleMode}
                            setArticleMode={setArticleMode}
                            openOnLoad={openOnLoad}
                            setOpenOnLoad={setOpenOnLoad}
                            article404={article404}
                            setArticle404={setArticle404}
                            location={location}
                            history={history}
                            newsid={query.newsID}
                            selectedSidebarNews={null}
                            handleSelectSidebarNews={() => {}}
                            isClickMostRead={isClickMostRead}
                            setIsClickMostRead={setIsClickMostRead}
                            isMostReadorNot={isMostReadorNot}
                            setIsMostReadorNot={setIsMostReadorNot}
                          />
                        </ErrorBoundary>
                      </div>
                    </Card>
                  </div>
                </div>
              </>
            )}

            <div className='row heightZero'>
              <div className='col-lg-12 mb-2 pb-0'>
                <a
                  className='text-secondary'
                  name='Fundamentals'
                  alt='Fundamentals'
                  href='#Fundamentals'
                >
                  <span className=' sr-only sr-only-focusable' />
                </a>
                {/* <h2>Financials</h2> */}
              </div>
            </div>

            <div className='row row-eq-height pt-2 pdfpagebreak'>
              {vunKeyFinancials && vunKeyFinancials.length > ARRAY_LOWEST_VALUE && (
                <div
                  className={`col-md-12 ${
                    query.print ? 'col-lg-12' : 'col-lg-6'
                  } mb-2 pb-0`}
                >
                  {getKeyFinancialTable()}
                </div>
              )}
              {!query.print &&
              props.vunKeyRation &&
                props.vunKeyRation.length > ARRAY_LOWEST_VALUE && (
                  <div className='col-md-12 col-lg-6 mb-2 pb-0'>
                    {getKeyRatioTable()}
                  </div>
                )}
            </div>

            {query.print &&
            props.vunKeyRation &&
            props.vunKeyRation.length > ARRAY_LOWEST_VALUE && (
              <div className='row row-eq-height pt-2 pdfpagebreak'>
                <div className='col-md-12 col-lg-12 mb-2 pb-0'>
                  {getKeyRatioTable()}
                </div>
              </div>
            )}

            {aivRecentFilings &&
            aivRecentFilings.length > ARRAY_LOWEST_VALUE && (
              <div className='row pt-2'>
                <div className='col-12 mb-2 pb-0'>
                  <ErrorBoundary hasCard cardtitle='Recent Filings'>
                    <Table
                      gridOptions={gridOptionsRecentFilings}
                      title='Recent Filings'
                      hideExcelDownloadIcon={TrialUserDisableDownload}
                    />
                  </ErrorBoundary>
                </div>
              </div>
            )}

            {vunSPP !== {} && (
              <div className='row'>
                <div className='col-12 d-block d-md-none'>
                  <ErrorBoundary hasCard cardtitle='Share Price Performance'>
                    <Table
                      gridOptions={gridOptionsSPP}
                      title='Share Price Performance'
                      hideExcelDownloadIcon={TrialUserDisableDownload}
                    />
                  </ErrorBoundary>
                </div>
                <div className='col-12 d-xs-none d-md-block mb-2 pb-0'>
                  <ErrorBoundary hasCard cardtitle='Share Price Performance'>
                    <Table
                      gridOptions={gridOptionsSPPVert}
                      title='Share Price Performance'
                      hideExcelDownloadIcon={TrialUserDisableDownload}
                    />
                  </ErrorBoundary>
                </div>
              </div>
            )}

            <div className='row heightZero'>
              <div className='col-lg-12 mb-2 pb-0'>
                <a
                  className='text-secondary'
                  name='Ownership'
                  alt='Ownership'
                  href='#Ownership'
                >
                  <span className=' sr-only sr-only-focusable' />
                </a>
                {/* <h2>Ownership</h2> */}
              </div>
            </div>

            <div className='row row-eq-height'>
              {/* Ownership */}
              <div
                className={`col-md-12 ${
                  query.print ? 'col-lg-12' : 'col-lg-6'
                } mb-2 pb-0d-flex flex-column pb-0 mb-2`}
              >
                {aivPIGetShareholdersTop10 && (
                  <div className='row flex-grow-1'>
                    <div className='col-12 mb-2 pb-0'>
                      <ErrorBoundary hasCard cardtitle='Top 10 Holders'>
                        <Table
                          title='Top 10 Holders'
                          gridOptions={gridOptionsOwnership_top_10_holders}
                          hideExcelDownloadIcon={TrialUserDisableDownload}
                        />
                      </ErrorBoundary>
                    </div>
                  </div>
                )}

                {aivGetVunGetAllInstitutionalMediansAndMADMs && (
                  <div className='row pt-2'>
                    <div className='col-12 mb-2 pb-0'>
                      <FooterCard
                        title='Institutional Investment'
                        textHeader='Percentage'
                        TrialUser={TrialStatus}
                        companyName={
                          vunDirectorCompany !== undefined &&
                          vunDirectorCompany.Company_name
                        }
                        companyNumber={
                          aivGetVunGetAllInstitutionalMediansAndMADMs.IIAct
                            ? `${checkValuesToFixed(
                                aivGetVunGetAllInstitutionalMediansAndMADMs.IIAct
                              )}%`
                            : '0%'
                        }
                        arrMedianJSON={[
                          {
                            peerName: 'Peer Group',
                            peerNumber:
                              aivGetVunGetAllInstitutionalMediansAndMADMs.IIMedPG
                                ? `${checkValuesToFixed(
                                    aivGetVunGetAllInstitutionalMediansAndMADMs.IIMedPG
                                  )}%`
                                : '0%',
                            peerHealth: DisplayFlagsByName(
                              vunOwnerHealth.instOwnerPG
                            ),
                          },
                          {
                            peerName: 'S&P 500',
                            peerNumber:
                              aivGetVunGetAllInstitutionalMediansAndMADMs.IIMedSP
                                ? `${checkValuesToFixed(
                                    aivGetVunGetAllInstitutionalMediansAndMADMs.IIMedSP
                                  )}%`
                                : '0%',
                            peerHealth: DisplayFlagsByName(
                              vunOwnerHealth.instOwnerSP
                            ),
                          },
                          {
                            peerName: 'All Companies',
                            peerNumber:
                              aivGetVunGetAllInstitutionalMediansAndMADMs.IIMedAC
                                ? `${checkValuesToFixed(
                                    aivGetVunGetAllInstitutionalMediansAndMADMs.IIMedAC
                                  )}%`
                                : '0%',
                            peerHealth: DisplayFlagsByName(
                              vunOwnerHealth.instOwnerAll
                            ),
                          },
                        ]}
                      />
                    </div>
                  </div>
                )}
              </div>
              <div
                className={`col-md-12 ${
                  query.print ? 'col-lg-12' : 'col-lg-6'
                }  mb-2 pb-0d-flex flex-column pb-0 mb-2 pt-2`}
              >
                {/* Activist Investors */}
                {activistInvestors &&
                activistInvestors.length > ARRAY_LOWEST_VALUE && (
                  <div className='row flex-grow-1'>
                    <div className='col-12 mb-2 pb-0'>
                      <ErrorBoundary hasCard cardtitle='Activist Investors'>
                        <Table
                          gridOptions={gridOptionsOwnershipActivistInvestors}
                          title='Activist Investors'
                          hideExcelDownloadIcon={TrialUserDisableDownload}
                        />
                      </ErrorBoundary>
                    </div>
                  </div>
                )}

                {aivGetVunGetAllActivistMediansAndMADMs && (
                  <div className='row pt-2'>
                    <div className='col-12 mb-2 pb-0'>
                      <FooterCard
                        title='Activist Investments'
                        textHeader='Percentage'
                        TrialUser={TrialStatus}
                        companyName={
                          vunDirectorCompany !== undefined &&
                          vunDirectorCompany.Company_name
                        }
                        companyNumber={
                          aivGetVunGetAllActivistMediansAndMADMs.AIAct
                            ? `${checkValuesToFixed(
                                aivGetVunGetAllActivistMediansAndMADMs.AIAct
                              )}%`
                            : '0%'
                        }
                        arrMedianJSON={[
                          {
                            peerName: 'Peer Group',
                            peerNumber:
                              aivGetVunGetAllActivistMediansAndMADMs.AIMedPG
                                ? `${checkValuesToFixed(
                                    aivGetVunGetAllActivistMediansAndMADMs.AIMedPG
                                  )}%`
                                : '0%',
                            peerHealth: DisplayFlagsByName(
                              vunOwnerHealth.actOwnerPG
                            ),
                          },
                          {
                            peerName: 'S&P 500',
                            peerNumber:
                              aivGetVunGetAllActivistMediansAndMADMs.AIMedSP
                                ? `${checkValuesToFixed(
                                    aivGetVunGetAllActivistMediansAndMADMs.AIMedSP
                                  )}%`
                                : '0%',
                            peerHealth: DisplayFlagsByName(
                              vunOwnerHealth.actOwnerSP
                            ),
                          },
                          {
                            peerName: 'All Companies',
                            peerNumber:
                              aivGetVunGetAllActivistMediansAndMADMs.AIMedAC
                                ? `${checkValuesToFixed(
                                    aivGetVunGetAllActivistMediansAndMADMs.AIMedAC
                                  )}%`
                                : '0%',
                            peerHealth: DisplayFlagsByName(
                              vunOwnerHealth.actOwnerAll
                            ),
                          },
                        ]}
                      />
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Activist Summary */}
            {
            activismSummary &&
            activismSummary.length > ARRAY_LOWEST_VALUE && (
              <div className='row'>
                <div className='col-12 mb-2 pb-0'>
                  <ErrorBoundary hasCard cardtitle='Activism Summary'>
                    <Table
                      gridOptions={gridOptionsOwnershipActivistSummary}
                      title='Activism Summary'
                      hideExcelDownloadIcon={TrialUserDisableDownload}
                    />
                  </ErrorBoundary>
                </div>
              </div>
            )}

            {/* Voting */}
            {Object.keys(aivPIGetMostRecentAGMOrPCMeetingIdWithVotes) && (
              <div className='row heightZero'>
                <div className='col-lg-12 mb-2 pb-0'>
                  <a
                    className='text-secondary'
                    name='Voting'
                    alt='Voting'
                    href='#Voting'
                  >
                    <span className=' sr-only sr-only-focusable' />
                  </a>
                  {/* <h2>Voting</h2> */}
                </div>
              </div>
            )}

            {/* AGM Voting Results */}
            {recentVotingResults &&
            recentVotingResults.length > ARRAY_LOWEST_VALUE &&
              Object.keys(aivPIGetMostRecentAGMOrPCMeetingIdWithVotes).length >
                ARRAY_LOWEST_VALUE && (
                <>
                  <div className='row pdfpagebreak'>
                    <div className='col-lg-12 mb-2 pb-0 ps-3'>
                      Last Meeting Date:
                      {dateToNull(meetingDate, 'dd-mmm-yy', true)}
                    </div>
                  </div>
                  <div className='row'>
                    <div className='col-lg-12 mb-2 pb-0'>
                      <ErrorBoundary hasCard cardtitle='AGM Voting Results'>
                        <Table
                          addedClass='pdfpb-30'
                          gridOptions={gridOptionsOwnershipVoting}
                          title='AGM Voting Results'
                          hideExcelDownloadIcon={TrialUserDisableDownload}
                        />
                      </ErrorBoundary>
                    </div>
                  </div>
                </>
              )}

            {/* AGM VOTING MEDIAN FOOTER  aivPIGetMostRecentAGMOrPCMeetingIdWithVotes */}
            {directorMedian && <VotingFooter key={13} />}

            {aivDirectorInfo &&
              vunDirectorCompany &&
              vunDirectorPeerGroup &&
              vunDirectorSP500 &&
              vunDirectorAllCompanies &&
              FooterCard && <GovernanceCards key={14} />}
          </div>
        </>
      )}
    </Page>
  );
};

ActivistVulnerability.propTypes = {
  TrialStatus: PropTypes.bool.isRequired,
  VulnerabilityPrankOverTime: PropTypes.array.isRequired,
  VulnerabilityScoreOverTime: PropTypes.array.isRequired,
  aivDirectorInfo: PropTypes.array.isRequired,
  aivGetVunGetAllActivistMediansAndMADMs: PropTypes.any,
  aivGetVunGetAllInstitutionalMediansAndMADMs: PropTypes.any,
  aivPIGetIssuer: PropTypes.object.isRequired,
  aivPIGetMostRecentAGMOrPCMeetingIdWithVotes: PropTypes.object.isRequired,
  aivPIGetShareholdersTop10: PropTypes.array.isRequired,
  aivRecentFilings: PropTypes.array.isRequired,
  aivVulnerabilityReport: PropTypes.object.isRequired,
  allowDownload: PropTypes.bool.isRequired,
  location: PropTypes.object.isRequired,
  rowData: PropTypes.any.isRequired,
};

ActivistVulnerability.defaultProps = {
  aivGetVunGetAllActivistMediansAndMADMs: undefined,
  aivGetVunGetAllInstitutionalMediansAndMADMs: undefined,
};
export default withRouter(React.memo(ActivistVulnerability));
