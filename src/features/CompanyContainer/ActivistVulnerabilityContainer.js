import PropTypes from 'prop-types';
import React, { useEffect, useCallback, useRef } from 'react';
import { connect } from 'react-redux';
import { Redirect, withRouter } from 'react-router-dom';
import qs from 'qs';
import axios from 'axios';
import {
  GetTrialOrActualTop20ListReq,
  piGetIssuerReq,
  piGetShareholdersTop10Req,
  getVunGetAllInstitutionalMediansAndMADMsReq,
  getVunGetAllActivistMediansAndMADMsReq,
  vunList10QAnd10KForIssuerReq,
  vunGetGovDirectorInfoV4Req,
  vunListNewsArticlesForIssuerReq,
  pIGetMostRecentAGMOrPCMeetingIdWithVotesReq,
  getVulnerabilityScoreOverTimeReq,
  getVulnerabilityPrankOverTimeReq,
  handleResetVulnerabilityReport,
  handleToggleChart,
  vunSummaryScore,
  handleResetActivistVulnerability,
  getPeerGroupDefaultNameReq,
  getcompany_PeerGroupOverviewReq,
  updateCompanyVunScorereq,
} from './CompanySlice';
import ActivistVulnerability from '../../components/Company/ActivistVulnerability/ActivistVulnerability';
import productsConst from '../../constants/ProductConstants';
import ErrorBoundary from '../../components/GeneralForm/ErrorBoundary';
import TypeConstants from '../../constants/TrialTypeConstants';
import {
  handleResetInvestorComparatorTool,
  handleSponsorSelection,
  getAllMeetingTypeReq,
  handleMeetingTypeSelection,
  getAllIndividualProponentReq,
  getAllGroupProponentReq,
  handleIndividualProponentSelection,
  handleGroupProponentSelection,
  handleStartInvCompDateSelection,
  handleEndInvCompDateSelection,
  handleIsInvCompDateChecked,
  handleProponentGroupsearch,
  resolutionsByInvestorFilterReq,
  handleComapnySearchSelectionInvComp,
  handleInvestorSearchSelectionInvComp,
  getDefaultPeerGroupDataReq,
  handleClearPeerGroupCompanySelection,
  handleClearPeerGroupInvestorSelection,
  handleClearResult,
  getResolutionsTypeIdByNameReq,
  handleButtonAccess,
  getTokenDecode,
} from '../ToolsContainer/ToolsSlice';
import {
  handleResetCompanyTitle,
  handleResetBreadcrumbs,
  handleResetCompanyPath,
} from '../General/TitleSlice';
import {
  // company
  handleCompanySearchOptionSelection,
  handleIndustrySelection,
  handleCompanySelection,
  HandleFilterModel,
  handleShowIndividualOption,
  handleShowGroupOption,
  handleBulkCompanySelection,
  piListOfIndicesReq,
  getAIPeersGroups,
  getListOfExchange,
  getTreeRegionsAndCountries,
  listInvestorTypeAndSubtype,
  getPIListSectorsAndIndustriesReq,
  getCompanySearchOptions,
  getInvestorSearchOptions,
  getCurrentShareholderReq,
  allIssuersReq,
  handleIndexSelectionChange,
  handleExchangeSelectionChange,
  handleAIPeerGroupSelection,
  handleMarketCapSelection,
  searchInvestorsReq,
  handleMarketCapMinRange,
  handleMarketCapMaxRange,
  HandleTreeViewIndustry,
  handleSaveCurrentList,
  HandleTreeViewCompanyLocation,
  getAllCompanySearchSelection,
  ResetCompanySearchOptionSelection,
  handleCompanySearchUpdateReq,
  searchCompanyAndIndustriesReq,
  handleCompanySingleSelection,
  handleRunReq,
  handleCompanySearchDeleteReq,

  // investor
  HandleInvestorFilterModel,
  HandleTreeViewInvestorLocation,
  getInvestorSearchSelectionReq,
  handleInvestorSelection,
  handleInvestorIsBulkUpload,
  handleBulkInvestorSelection,
  handleByShareholderOfCompany,
  getAllInvestorsFromShareholderOfCompany,
  HandleTreeViewListInvestorTypeAndSubtype,
  handleSaveInvestorCurrentList,
  handleInvestorSearchDeleteReq,
  handleInvestorSearchUpdateReq,
  handleInvestorSearchOptionSelection,
  handleReset,
  getAumCategorylistReq,
  handleAumCategorySelection,
  handleInvMarketCapMinRange,
  handleInvMarketCapMaxRange,
  handleResetInvestorSelections,
  handleResetCompnaySelections,
  ResetInvestorSearchOptionSelection,
} from '../DashboardContainer/DashboardSlice';
//../../DashboardContainer/DashboardSlice
import pathConst from '../../constants/PathsConstant';
import { isIdNotNullOrUndefined } from '../../utils/general-util';

const ActivistVulnerabilityContainer = ({
  location,
  children,
  getTrialOrActualTop20List_TrialStatus,
  getTrialOrActualTop20List,
  GetTrialOrActualTop20ListReq,
  allowDownload,
  piGetIssuerReq,
  aivPIGetIssuer,
  pIGetMostRecentAGMOrPCMeetingIdWithVotesReq,
  aivPIGetMostRecentAGMOrPCMeetingIdWithVotes,
  piGetShareholdersTop10Req,
  aivPIGetShareholdersTop10,
  getVunGetAllInstitutionalMediansAndMADMsReq,
  aivGetVunGetAllInstitutionalMediansAndMADMs,
  getVunGetAllActivistMediansAndMADMsReq,
  aivGetVunGetAllActivistMediansAndMADMs,
  vunList10QAnd10KForIssuerReq,
  vunGetGovDirectorInfoV4Req,
  vunListNewsArticlesForIssuerReq,
  aivRecentFilings,
  aivDirectorInfo,
  aivVulnerabilityReport,
  getVulnerabilityScoreOverTimeReq,
  VulnerabilityScoreOverTime,
  getVulnerabilityPrankOverTimeReq,
  VulnerabilityPrankOverTime,
  handleResetVulnerabilityReport,
  handleToggleChart,
  toggleChart,
  vunSummaryScore,
  vunSummaryScoreData,
  vunDirectorCompany,
  vunDirectorAllCompanies,
  vunDirectorPeerGroup,
  vunDirectorSP500,
  handleResetActivistVulnerability,
  distinctProfile,
  trialUserDisableDownload,
  trialUserBlur,
  trialProductStatus,
  isLoadingVulnerabilityData,
  //
  vunKeyFinancials,
  vunYears,
  vunKeyRatios,
  activistInvestors,
  activismSummary,
  engagement,
  maxEndDate,
  activistInPlay,
  percentileRank,
  tickerName,
  vunSPP,
  //
  meetingDate,
  recentVotingResults,
  votingRemuneration,
  votingRemunerationOneYearBack,
  directorMedian,
  //
  vunReport,
  vunReportIDs,
  //
  getPeerGroupDefaultNameReq,
  getcompany_PeerGroupOverviewReq,
  updateCompanyVunScorereq,
  handleClearPeerGroupCompanySelection,
  ...props
}) => {
  const query = qs.parse(location.search, { ignoreQueryPrefix: true });
  const firstLoad = useRef(true);

  if (!isIdNotNullOrUndefined(query.pid)) {
    return <Redirect to={pathConst.COMPANY_SEARCH} />;
  }

  useEffect(() => {
    const abortController = new AbortController();
    handleResetVulnerabilityReport();
    handleResetActivistVulnerability();
    return function cleanup() {
      abortController.abort();
    };
  }, [handleResetActivistVulnerability]);

  const getData = useCallback(
    async (cancelToken) => {
      let pId = query.pid;
      const abortController = new AbortController();

      if (distinctProfile !== null && pId !== undefined) {
        if (distinctProfile) {
          pId = TypeConstants.TRIAL_PID;
        }
        const data = {
          pid: pId,
          cmp_search_id: !firstLoad.current
            ? props.invCompCompanyPeerGroupSelection !== undefined
              ? props.invCompCompanyPeerGroupSelection.value
              : null
            : null,
          activist_vulnerability: true,
          cancelToken: cancelToken.token,
        };
        const pidData = { pid: pId, cancelToken: cancelToken.token };

        await GetTrialOrActualTop20ListReq(productsConst.ACTIVISM);
        await vunSummaryScore(pidData);
        await piGetIssuerReq(data);
        await piGetShareholdersTop10Req(pidData);
        await pIGetMostRecentAGMOrPCMeetingIdWithVotesReq(data);
        await getVunGetAllInstitutionalMediansAndMADMsReq(data);
        await getVunGetAllActivistMediansAndMADMsReq(data);
        await vunList10QAnd10KForIssuerReq(pidData);
        await vunGetGovDirectorInfoV4Req(data);
        await vunListNewsArticlesForIssuerReq(pidData);
        await getVulnerabilityScoreOverTimeReq(pidData);
        await getVulnerabilityPrankOverTimeReq(pidData);
        await getPeerGroupDefaultNameReq(pidData);
        await getcompany_PeerGroupOverviewReq(data);
        firstLoad.current = false;
      }
      return function cleanup() {
        abortController.abort();
        cancelToken.cancel();
      };
    },
    [
      distinctProfile,
      GetTrialOrActualTop20ListReq,
      piGetIssuerReq,
      vunList10QAnd10KForIssuerReq,
      vunGetGovDirectorInfoV4Req,
      vunListNewsArticlesForIssuerReq,
      piGetShareholdersTop10Req,
      getVunGetAllInstitutionalMediansAndMADMsReq,
      getVunGetAllActivistMediansAndMADMsReq,
      pIGetMostRecentAGMOrPCMeetingIdWithVotesReq,
      getVulnerabilityScoreOverTimeReq,
      getVulnerabilityPrankOverTimeReq,
      vunSummaryScore,
      query.pid,
      props.invCompCompanyPeerGroupSelection,
      getPeerGroupDefaultNameReq,
      getcompany_PeerGroupOverviewReq,
    ]
  );

  const getData1 = useCallback(
    async (cancelToken) => {
      let pId = query.pid;
      const abortController = new AbortController();

      if (distinctProfile !== null && pId !== undefined) {
        if (distinctProfile) {
          pId = TypeConstants.TRIAL_PID;
        }
        const data = {
          pid: pId,
          cmp_search_id: !firstLoad.current
            ? props.invCompCompanyPeerGroupSelection !== undefined
              ? props.invCompCompanyPeerGroupSelection.value
              : null
            : null,
          cancelToken: cancelToken.token,
        };
        handleResetVulnerabilityReport();
        if (props.invCompCompanyPeerGroupSelection !== undefined) {
          await updateCompanyVunScorereq(data);
        }
      }
      return function cleanup() {
        abortController.abort();
        cancelToken.cancel();
      };
    },
    [
      query.pid,
      updateCompanyVunScorereq,
      props.invCompCompanyPeerGroupSelection,
    ]
  );

  useEffect(() => {
    const abortController = new AbortController();
    const cancelToken = axios.CancelToken.source();

    getData(cancelToken);
    getData1(cancelToken);

    return function cleanup() {
      abortController.abort();
      cancelToken.cancel();
    };
  }, [getData, getData1]);

  useEffect(() => {
    const abortController = new AbortController();

    async function getData() {
      props.piListOfIndicesReq();
      props.getListOfExchange();
      props.getAIPeersGroups();
      props.getTreeRegionsAndCountries();
      props.listInvestorTypeAndSubtype();
      props.getPIListSectorsAndIndustriesReq();
      props.getCompanySearchOptions();
      props.getInvestorSearchOptions();
      props.getCurrentShareholderReq();
      props.getCompanySearchOptions();
      props.getInvestorSearchOptions();
      props.getAumCategorylistReq();
      const optionData = {
        comp: props.companySearchOptionSelection,
        inve: props.investorSearchOptionsSelection,
      };
      props.getDefaultPeerGroupDataReq(optionData);
    }
    getData();

    return function cleanup() {
      abortController.abort();
    };
  }, [
    props.getCompanySearchOptions,
    props.getInvestorSearchOptions,
    props.getPIListSectorsAndIndustriesReq,
    props.piListOfIndicesReq,
    props.getListOfExchange,
    props.getAIPeersGroups,
    props.getTreeRegionsAndCountries,
    props.listInvestorTypeAndSubtype,
    props.getCurrentShareholderReq,
    props.companySearchOptionSelection,
    props.investorSearchOptionsSelection,
    props.getAumCategorylistReq,
    props.getDefaultPeerGroupDataReq,
  ]);

  return (
    <ErrorBoundary>
      <ActivistVulnerability
        children={children}
        // TrialStatus={getTrialOrActualTop20List_TrialStatus}
        rowData={getTrialOrActualTop20List}
        allowDownload={allowDownload}
        aivPIGetMostRecentAGMOrPCMeetingIdWithVotes={
          aivPIGetMostRecentAGMOrPCMeetingIdWithVotes
        }
        aivPIGetShareholdersTop10={aivPIGetShareholdersTop10}
        aivGetVunGetAllInstitutionalMediansAndMADMs={
          aivGetVunGetAllInstitutionalMediansAndMADMs
        }
        aivGetVunGetAllActivistMediansAndMADMs={
          aivGetVunGetAllActivistMediansAndMADMs
        }
        aivRecentFilings={aivRecentFilings}
        aivDirectorInfo={aivDirectorInfo}
        aivVulnerabilityReport={aivVulnerabilityReport}
        VulnerabilityScoreOverTime={VulnerabilityScoreOverTime}
        VulnerabilityPrankOverTime={VulnerabilityPrankOverTime}
        handleToggleChart={handleToggleChart}
        toggleChart={toggleChart}
        vunSummaryScoreData={vunSummaryScoreData}
        vunDirectorCompany={vunDirectorCompany}
        vunDirectorAllCompanies={vunDirectorAllCompanies}
        vunDirectorPeerGroup={vunDirectorPeerGroup}
        vunDirectorSP500={vunDirectorSP500}
        TrialUserDisableDownload={trialUserDisableDownload}
        TrialUser={trialUserBlur}
        TrialStatus={trialUserBlur}
        isLoadingData={isLoadingVulnerabilityData}
        //
        aivPIGetIssuer={aivPIGetIssuer}
        vunKeyFinancials={vunKeyFinancials}
        vunYears={vunYears}
        vunKeyRatios={vunKeyRatios}
        activistInvestors={activistInvestors}
        activismSummary={activismSummary}
        engagement={engagement}
        maxEndDate={maxEndDate}
        activistInPlay={activistInPlay}
        percentileRank={percentileRank}
        tickerName={tickerName}
        vunSPP={vunSPP}
        //
        meetingDate={meetingDate}
        recentVotingResults={recentVotingResults}
        votingRemuneration={votingRemuneration}
        votingRemunerationOneYearBack={votingRemunerationOneYearBack}
        directorMedian={directorMedian}
        //
        vunReport={vunReport}
        vunReportIDs={vunReportIDs}
        //
        handleClearPeerGroupCompanySelection={
          handleClearPeerGroupCompanySelection
        }
        {...props}
      />
    </ErrorBoundary>
  );
};

const selectGetTrialOrActualTop20List = (state) =>
  state.company.getTrialOrActualTop20List;
const selectGetTrialOrActualTop20List_TrialStatus = (state) =>
  state.company.getTrialOrActualTop20List_TrialStatus;
const selectAllowDownload = (state) => state.company.allowDownload;
const selectPIGetIssuer = (state) => state.company.PIGetIssuer;

const selectvunKeyFinancials = (state) => state.company.vunKeyFinancials;
const selectvunYears = (state) => state.company.vunYears;
const selectvunKeyRatios = (state) => state.company.vunKeyRatios;
const selectactivistInvestors = (state) => state.company.activistInvestors;
const selectactivismSummary = (state) => state.company.activismSummary;
const selectengagement = (state) => state.company.engagement;
const selectmaxEndDate = (state) => state.company.maxEndDate;
const selectactivistInPlay = (state) => state.company.activistInPlay;
const selectpercentileRank = (state) => state.company.percentileRank;
const selecttickerName = (state) => state.company.tickerName;
const selectvunSPP = (state) => state.company.vunSPP;

const selectPIGetMostRecentAGMOrPCMeetingIdWithVotes = (state) =>
  state.company.PIGetMostRecentAGMOrPCMeetingIdWithVotes;

const selectmeetingDate = (state) => state.company.meetingDate;
const selectrecentVotingResults = (state) => state.company.recentVotingResults;
const selectvotingRemuneration = (state) => state.company.votingRemuneration;
const selectvotingRemunerationOneYearBack = (state) =>
  state.company.votingRemunerationOneYearBack;
const selectdirectorMedian = (state) => state.company.directorMedian;

const selectPIGetShareholdersTop10 = (state) =>
  state.company.PIGetShareholdersTop10;
const selectGetVunGetAllInstitutionalMediansAndMADMs = (state) =>
  state.company.GetVunGetAllInstitutionalMediansAndMADMs;
const selectGetVunGetAllActivistMediansAndMADMs = (state) =>
  state.company.GetVunGetAllActivistMediansAndMADMs;
const selectRecentFilings = (state) => state.company.recentFilings;
const selectDirectorInformation = (state) => state.company.vunDirectorInfo;
const selectVulnerabilityReport = (state) => state.company.vulnerabilityReport;

const selectvunReport = (state) => state.company.vunReport;
const selectvunReportIDs = (state) => state.company.vunReportIDs;

const selectVulnerabilityScoreOverTime = (state) =>
  state.company.VulnerabilityScoreOverTime;
const selectVulnerabilityPrankOverTime = (state) =>
  state.company.VulnerabilityPrankOverTime;
const selectToggleChart = (state) => state.company.toggleChart;
const selectVunSummaryScoreData = (state) => state.company.vunSummaryScoreData;

const selectVunDirectorCompany = (state) => state.company.vunDirectorCompany;
const selectVunDirectorAllCompanies = (state) =>
  state.company.vunDirectorAllCompanies;
const selectVunDirectorPeerGroup = (state) =>
  state.company.vunDirectorPeerGroup;
const selectVunDirectorSP500 = (state) => state.company.vunDirectorSP500;
const selectisLoadingData = (state) => state.company.isLoadingVulnerabilityData;

//Company Trial
const selectDistinctProfile = (state) => state.trial.distinctProfile;
const selectTrialUserDisableDownload = (state) =>
  state.trial.trialUserDisableDownload;
const selectTrialUserBlur = (state) => state.trial.trialUserBlur;
const selectTialProductStatus = (state) => state.trial.trialProductStatus;

// #region
const selectIndustrySelection = (state) => state.dashboard.industrySelection;
const selectShowFilterModel = (state) => state.dashboard.showFilterModel;
const selectCompanySelection = (state) => state.dashboard.companySelection;
const selectShowIndividualOption = (state) =>
  state.dashboard.showIndividualOption;
const selectBulkCompanySelectRecordset = (state) =>
  state.dashboard.freeSearchRecordset;
const selectListOfIndicesRecordSet = (state) => state.dashboard.piListIndices;
const selectIndexSelection = (state) => state.dashboard.indexSelection;
const selectListOfExchange = (state) => state.dashboard.listExchange;
const selectExchangeSelection = (state) => state.dashboard.exchangeSelection;
const selectAIPeerGroup = (state) => state.dashboard.listAIPeersGroups;
const selectAIPeerGroupSelection = (state) =>
  state.dashboard.aiPeerGroupSelection;
const selectListMarketCap = (state) => state.dashboard.listMarketCap;
const selectMarketCapSelection = (state) => state.dashboard.marketCapSelection;
const selectTextMarketCapMinRange = (state) =>
  state.dashboard.txtMarketCapMinRange;
const selectTextMarketCapMaxRange = (state) =>
  state.dashboard.txtMarketCapMaxRange;
const selectCompanyLocationSelection = (state) =>
  state.dashboard.companyLocationSelection;
const selectListRegeionAndCountries = (state) =>
  state.dashboard.listRegeionAndCountries;
const selectPIListSectorsAndIndustries = (state) =>
  state.dashboard.piListSectorsAndIndustries;
const selectCompanySearchOptionSelection = (state) =>
  state.dashboard.companySearchOptionSelection;
const selectCompanySearchOptions = (state) =>
  state.dashboard.companySearchOptions;
const selectTextSaveCurrentList = (state) => state.dashboard.txtSaveCurrentList;
const selectSaveCurrentListButtonText = (state) =>
  state.dashboard.saveCurrentListButtonText;
const selectCompanySingleSelection = (state) =>
  state.dashboard.companySingleSelection;

// dashboard - investor search
const selectInvListRegeionAndCountries = (state) =>
  state.dashboard.invListRegeionAndCountries;
const selectInvTxtMarketCapMinRange = (state) =>
  state.dashboard.invTxtMarketCapMinRange;
const selectInvTxtMarketCapMaxRange = (state) =>
  state.dashboard.invTxtMarketCapMaxRange;
const selectInvestorSelection = (state) => state.dashboard.investorSelection;
const selectInvestorSearchOptions = (state) =>
  state.dashboard.investorSearchOptions;
const selectInvestorSearchOptionsSelection = (state) =>
  state.dashboard.investorSearchOptionsSelection;
const selectShowInvestorFilterModel = (state) =>
  state.dashboard.showInvestorFilterModel;
const selectInvestorLocationSelection = (state) =>
  state.dashboard.investorLocationSelection;
const selectListInvestorTypeAndSubtype = (state) =>
  state.dashboard.listInvestorTypeAndSubtype;
const selectListInvestorTypeAndSubtypeSelection = (state) =>
  state.dashboard.listInvestorTypeAndSubtypeSelection;
const selectInvestorBulkUpload = (state) =>
  state.dashboard.isInvestorBulkUpload;
const selectlistByIndivProponent = (state) =>
  state.dashboard.listByIndivProponent;
const selectSelectionByIndivProponent = (state) =>
  state.dashboard.selectionByIndivProponent;
const selectIsSaveCurrentListButtonDeleteDisable = (state) =>
  state.dashboard.isSaveCurrentListButtonDeleteDisable;

// AUM ($bn)
const selectListAumCategory = (state) => state.dashboard.listAumCategory;
const selectAumCategorySelection = (state) =>
  state.dashboard.aumCategorySelection;

// title slice
// selection - company & investor search
const SelectInvCompCompanyPeerGroupSelection = (state) =>
  state.tools.invCompCompanyPeerGroupSelection;
const SelectInvCompInvestorPeerGroupSelection = (state) =>
  state.tools.invCompInvestorPeerGroupSelection;
const SelectIsResetCompanyPeerGroupSelection = (state) =>
  state.tools.isResetCompanyPeerGroupSelection;
const SelectIsResetInvestorPeerGroupSelection = (state) =>
  state.tools.isResetInvestorPeerGroupSelection;

// Tools - General
const SelectSelectedInvestorDetailsProposalTypeId = (state) =>
  state.tools.selectedInvestorDetailsProposalTypeId;
const SelectSelectedInvestorDetailsProposalSubLevelTypeId = (state) =>
  state.tools.selectedInvestorDetailsProposalSubLevelTypeId;
const SelectSelectedInvestorDetailsProposalTopLevelTypeId = (state) =>
  state.tools.selectedInvestorDetailsProposalTopLevelTypeId;

//default selection tree view
const selectListDefaultInvestorTypeAndSubtype = (state) =>
  state.dashboard.listDefaultInvestorTypeAndSubtype;
const selectLstInvestorRegeionAndCountries = (state) =>
  state.dashboard.lstInvestorRegeionAndCountries;
const selectDefaultCmpRegeionAndCountries = (state) =>
  state.dashboard.defaultCmpRegeionAndCountries;
const selectDefaultPiListSectorsAndIndustries = (state) =>
  state.dashboard.defaultPiListSectorsAndIndustries;
// #endregion

//company slice
const selectPeerGroupDefaultName = (state) =>
  state.company.peerGroupDefaultName;
const Select_company_PeerGroupOverview = (state) =>
  state.company.lstCompanyPeerGroup;
const Select_lstOriginalData = (state) => state.company.lstOriginalData;
const selectVunKeyRation = (state) => state.company.vunKeyRation;
//#company slice
const mapStateToProps = (state) => ({
  isLoadingVulnerabilityData: selectisLoadingData(state),

  getTrialOrActualTop20List: selectGetTrialOrActualTop20List(state),
  getTrialOrActualTop20List_TrialStatus:
    selectGetTrialOrActualTop20List_TrialStatus(state),
  allowDownload: selectAllowDownload(state),
  aivPIGetIssuer: selectPIGetIssuer(state),

  vunKeyFinancials: selectvunKeyFinancials(state),
  vunYears: selectvunYears(state),
  vunKeyRatios: selectvunKeyRatios(state),
  activistInvestors: selectactivistInvestors(state),
  activismSummary: selectactivismSummary(state),
  engagement: selectengagement(state),
  maxEndDate: selectmaxEndDate(state),
  activistInPlay: selectactivistInPlay(state),
  percentileRank: selectpercentileRank(state),
  tickerName: selecttickerName(state),
  vunSPP: selectvunSPP(state),

  meetingDate: selectmeetingDate(state),
  recentVotingResults: selectrecentVotingResults(state),
  votingRemuneration: selectvotingRemuneration(state),
  votingRemunerationOneYearBack: selectvotingRemunerationOneYearBack(state),
  directorMedian: selectdirectorMedian(state),

  aivPIGetMostRecentAGMOrPCMeetingIdWithVotes:
    selectPIGetMostRecentAGMOrPCMeetingIdWithVotes(state),
  aivPIGetShareholdersTop10: selectPIGetShareholdersTop10(state),
  aivGetVunGetAllInstitutionalMediansAndMADMs:
    selectGetVunGetAllInstitutionalMediansAndMADMs(state),
  aivGetVunGetAllActivistMediansAndMADMs:
    selectGetVunGetAllActivistMediansAndMADMs(state),
  aivRecentFilings: selectRecentFilings(state),
  aivDirectorInfo: selectDirectorInformation(state),
  aivVulnerabilityReport: selectVulnerabilityReport(state),
  vunReport: selectvunReport(state),
  vunReportIDs: selectvunReportIDs(state),

  VulnerabilityScoreOverTime: selectVulnerabilityScoreOverTime(state),
  VulnerabilityPrankOverTime: selectVulnerabilityPrankOverTime(state),
  toggleChart: selectToggleChart(state),
  vunSummaryScoreData: selectVunSummaryScoreData(state),

  vunDirectorCompany: selectVunDirectorCompany(state),
  vunDirectorAllCompanies: selectVunDirectorAllCompanies(state),
  vunDirectorPeerGroup: selectVunDirectorPeerGroup(state),
  vunDirectorSP500: selectVunDirectorSP500(state),
  //company Trial
  distinctProfile: selectDistinctProfile(state),
  trialUserDisableDownload: selectTrialUserDisableDownload(state),
  trialUserBlur: selectTrialUserBlur(state),
  trialProductStatus: selectTialProductStatus(state),

  //#region COMPANY AND INVESTOR FILTE
  // Tools - General
  selectedInvestorDetailsProposalTypeId:
    SelectSelectedInvestorDetailsProposalTypeId(state),
  selectedInvestorDetailsProposalSubLevelTypeId:
    SelectSelectedInvestorDetailsProposalSubLevelTypeId(state),
  selectedInvestorDetailsProposalTopLevelTypeId:
    SelectSelectedInvestorDetailsProposalTopLevelTypeId(state),

  // investor search selection
  investorSearchOptionsSelection: selectInvestorSearchOptionsSelection(state),
  investorSelection: selectInvestorSelection(state),
  isInvestorBulkUpload: selectInvestorBulkUpload(state),
  investorSearchOptions: selectInvestorSearchOptions(state),
  showInvestorFilterModel: selectShowInvestorFilterModel(state),
  investorLocationSelection: selectInvestorLocationSelection(state),
  listInvestorTypeAndSubtype: selectListInvestorTypeAndSubtype(state),
  listInvestorTypeAndSubtypeSelection:
    selectListInvestorTypeAndSubtypeSelection(state),
  listByIndivProponent: selectlistByIndivProponent(state),
  selectionByIndivProponent: selectSelectionByIndivProponent(state),
  isSaveCurrentListButtonDeleteDisable:
    selectIsSaveCurrentListButtonDeleteDisable(state),

  // AUM ($bn)
  listAumCategory: selectListAumCategory(state),
  aumCategorySelection: selectAumCategorySelection(state),

  // Company search selection
  companySearchOptionSelection: selectCompanySearchOptionSelection(state),
  industrySelection: selectIndustrySelection(state),
  showFilterModel: selectShowFilterModel(state),
  companySelection: selectCompanySelection(state),
  showIndividualOption: selectShowIndividualOption(state),
  freeSearchRecordset: selectBulkCompanySelectRecordset(state),
  piListIndices: selectListOfIndicesRecordSet(state),
  indexSelection: selectIndexSelection(state),
  listOfExchange: selectListOfExchange(state),
  exchangeSelection: selectExchangeSelection(state),
  aiPeerGroups: selectAIPeerGroup(state),
  aiPeerGroupSelection: selectAIPeerGroupSelection(state),
  listMarketCap: selectListMarketCap(state),
  marketCapSelection: selectMarketCapSelection(state),
  companyLocationSelection: selectCompanyLocationSelection(state),
  listRegeionAndCountries: selectListRegeionAndCountries(state),
  piListOfSectorsAndIndustries: selectPIListSectorsAndIndustries(state),
  listOfcompanySearchOptions: selectCompanySearchOptions(state),
  txtSaveCurrentList: selectTextSaveCurrentList(state),
  saveCurrentListButtonText: selectSaveCurrentListButtonText(state),
  companySingleSelection: selectCompanySingleSelection(state),
  txtMarketCapMinRange: selectTextMarketCapMinRange(state),
  txtMarketCapMaxRange: selectTextMarketCapMaxRange(state),
  invListRegeionAndCountries: selectInvListRegeionAndCountries(state),
  invTxtMarketCapMinRange: selectInvTxtMarketCapMinRange(state),
  invTxtMarketCapMaxRange: selectInvTxtMarketCapMaxRange(state),
  // selection - company & investor search
  invCompCompanyPeerGroupSelection:
    SelectInvCompCompanyPeerGroupSelection(state),
  invCompInvestorPeerGroupSelection:
    SelectInvCompInvestorPeerGroupSelection(state),
  isResetCompanyPeerGroupSelection:
    SelectIsResetCompanyPeerGroupSelection(state),
  isResetInvestorPeerGroupSelection:
    SelectIsResetInvestorPeerGroupSelection(state),
  listDefaultInvestorTypeAndSubtype:
    selectListDefaultInvestorTypeAndSubtype(state),
  lstInvestorRegeionAndCountries: selectLstInvestorRegeionAndCountries(state),
  defaultCmpRegeionAndCountries: selectDefaultCmpRegeionAndCountries(state),
  defaultPiListSectorsAndIndustries:
    selectDefaultPiListSectorsAndIndustries(state),
  //#endregion END COMPANY AND INVESTOR FILTER

  peerGroupDefaultName: selectPeerGroupDefaultName(state),
  lstCompanyPeerGroup: Select_company_PeerGroupOverview(state),
  lstOriginalData: Select_lstOriginalData(state),
  vunKeyRation: selectVunKeyRation(state),
});

const mapDispatchToProps = {
  GetTrialOrActualTop20ListReq,
  piGetIssuerReq,
  pIGetMostRecentAGMOrPCMeetingIdWithVotesReq,
  piGetShareholdersTop10Req,
  getVunGetAllInstitutionalMediansAndMADMsReq,
  getVunGetAllActivistMediansAndMADMsReq,
  vunList10QAnd10KForIssuerReq,
  vunGetGovDirectorInfoV4Req,
  vunListNewsArticlesForIssuerReq,
  getVulnerabilityScoreOverTimeReq,
  handleResetVulnerabilityReport,
  getVulnerabilityPrankOverTimeReq,
  handleToggleChart,
  vunSummaryScore,
  handleResetActivistVulnerability,

  handleResetInvestorComparatorTool,
  handleSponsorSelection,
  getAllMeetingTypeReq,
  handleMeetingTypeSelection,
  getAllIndividualProponentReq,
  getAllGroupProponentReq,
  handleIndividualProponentSelection,
  handleGroupProponentSelection,
  handleStartInvCompDateSelection,
  handleEndInvCompDateSelection,
  handleIsInvCompDateChecked,
  handleProponentGroupsearch,
  resolutionsByInvestorFilterReq,
  handleComapnySearchSelectionInvComp,
  handleInvestorSearchSelectionInvComp,
  getDefaultPeerGroupDataReq,
  handleClearPeerGroupCompanySelection,
  handleClearPeerGroupInvestorSelection,
  handleClearResult,
  getResolutionsTypeIdByNameReq,
  handleButtonAccess,
  getTokenDecode,

  // company
  handleCompanySearchOptionSelection,
  handleIndustrySelection,
  handleCompanySelection,
  HandleFilterModel,
  handleShowIndividualOption,
  handleShowGroupOption,
  handleBulkCompanySelection,
  piListOfIndicesReq,
  getAIPeersGroups,
  getListOfExchange,
  getTreeRegionsAndCountries,
  listInvestorTypeAndSubtype,
  getPIListSectorsAndIndustriesReq,
  getCompanySearchOptions,
  getInvestorSearchOptions,
  getCurrentShareholderReq,
  allIssuersReq,
  handleIndexSelectionChange,
  handleExchangeSelectionChange,
  handleAIPeerGroupSelection,
  handleMarketCapSelection,
  searchInvestorsReq,
  handleMarketCapMinRange,
  handleMarketCapMaxRange,
  HandleTreeViewIndustry,
  handleSaveCurrentList,
  HandleTreeViewCompanyLocation,
  getAllCompanySearchSelection,
  ResetCompanySearchOptionSelection,
  handleCompanySearchUpdateReq,
  searchCompanyAndIndustriesReq,
  handleCompanySingleSelection,
  handleRunReq,
  handleCompanySearchDeleteReq,

  // investor
  HandleInvestorFilterModel,
  HandleTreeViewInvestorLocation,
  getInvestorSearchSelectionReq,
  handleInvestorSelection,
  handleInvestorIsBulkUpload,
  handleBulkInvestorSelection,
  handleByShareholderOfCompany,
  getAllInvestorsFromShareholderOfCompany,
  HandleTreeViewListInvestorTypeAndSubtype,
  handleSaveInvestorCurrentList,
  handleInvestorSearchDeleteReq,
  handleInvestorSearchUpdateReq,
  handleInvestorSearchOptionSelection,
  handleReset,
  getAumCategorylistReq,
  handleAumCategorySelection,
  handleInvMarketCapMinRange,
  handleInvMarketCapMaxRange,
  handleResetInvestorSelections,
  handleResetCompnaySelections,
  ResetInvestorSearchOptionSelection,
  getPeerGroupDefaultNameReq,
  getcompany_PeerGroupOverviewReq,
  handleResetCompanyTitle,
  handleResetBreadcrumbs,
  handleResetCompanyPath,
  updateCompanyVunScorereq,
};

ActivistVulnerabilityContainer.propTypes = {
  GetTrialOrActualTop20ListReq: PropTypes.func,
  VulnerabilityPrankOverTime: PropTypes.array,
  VulnerabilityScoreOverTime: PropTypes.array,
  aivDirectorInfo: PropTypes.array,
  aivGetVunGetAllActivistMediansAndMADMs: PropTypes.any,
  aivGetVunGetAllInstitutionalMediansAndMADMs: PropTypes.any,
  aivPIGetIssuer: PropTypes.object,
  aivPIGetMostRecentAGMOrPCMeetingIdWithVotes: PropTypes.object,
  aivPIGetShareholdersTop10: PropTypes.array,
  aivRecentFilings: PropTypes.array,
  aivVulnerabilityReport: PropTypes.object,
  allowDownload: PropTypes.bool,
  children: PropTypes.array,
  getTrialOrActualTop20List: PropTypes.any,
  getTrialOrActualTop20List_TrialStatus: PropTypes.any,
  getVulnerabilityPrankOverTimeReq: PropTypes.func,
  getVulnerabilityScoreOverTimeReq: PropTypes.func,
  getVunGetAllActivistMediansAndMADMsReq: PropTypes.func,
  getVunGetAllInstitutionalMediansAndMADMsReq: PropTypes.func,
  handleResetVulnerabilityReport: PropTypes.func,
  location: PropTypes.object.isRequired,
  pIGetMostRecentAGMOrPCMeetingIdWithVotesReq: PropTypes.func,
  piGetIssuerReq: PropTypes.func,
  piGetShareholdersTop10Req: PropTypes.func,
  vunGetGovDirectorInfoV4Req: PropTypes.func,
  vunList10QAnd10KForIssuerReq: PropTypes.func,
  vunListNewsArticlesForIssuerReq: PropTypes.func,
};

ActivistVulnerabilityContainer.defaultProps = {
  GetTrialOrActualTop20ListReq: () => {},
  VulnerabilityPrankOverTime: [],
  VulnerabilityScoreOverTime: [],
  aivDirectorInfo: [],
  aivGetVunGetAllActivistMediansAndMADMs: undefined,
  aivGetVunGetAllInstitutionalMediansAndMADMs: undefined,
  aivPIGetIssuer: {},
  aivPIGetMostRecentAGMOrPCMeetingIdWithVotes: {},
  aivPIGetShareholdersTop10: [],
  aivRecentFilings: [],
  aivVulnerabilityReport: {},
  allowDownload: true,
  children: [],
  getTrialOrActualTop20List: undefined,
  getTrialOrActualTop20List_TrialStatus: undefined,
  getVulnerabilityPrankOverTimeReq: () => {},
  getVulnerabilityScoreOverTimeReq: () => {},
  getVunGetAllActivistMediansAndMADMsReq: () => {},
  getVunGetAllInstitutionalMediansAndMADMsReq: () => {},
  handleResetVulnerabilityReport: () => {},
  pIGetMostRecentAGMOrPCMeetingIdWithVotesReq: () => {},
  piGetIssuerReq: () => {},
  piGetShareholdersTop10Req: () => {},
  vunGetGovDirectorInfoV4Req: () => {},
  vunList10QAnd10KForIssuerReq: () => {},
  vunListNewsArticlesForIssuerReq: () => {},
};

export default withRouter(
  connect(mapStateToProps, mapDispatchToProps)(ActivistVulnerabilityContainer)
);
