import PropTypes, { array } from 'prop-types';
import React, { useState } from 'react';
import Page from '../../Page';
import Table from '../../GeneralForm/Table';
import DropdownTreeSelect from '../../GeneralForm/DropdownTreeSelect';
import DropdownList from '../../GeneralForm/DropdownList';
import CollapseComponent from '../../GeneralForm/CollapseComponent';
import {
  NameToImageIcon,
  ChangeName,
  NameToLetter,
  bottomStatusBar,
} from '../../../utils/AgGridFunctions';
import FilterSavesearchModal from '../General/FilterSavesearchModal';
import CompanySearchComponent from '../../GeneralForm/CompanySearchComponent';

import useWindowDimensions from '../../GeneralForm/useWindowDimensions';
import messageConst from '../../../constants/MessageConstans';
import ProgressBar from '../../GeneralForm/ProgressBar';
import { ICON_IMAGE_PATH } from '../../../constants/PathsConstant';
import numConst from '../../../constants/NumberConstants';
import { filterFunctions } from '../../../utils/general-util';

const CompanyPeerGroupComparisonMatrixTool = ({ location, ...props }) => {
  React.useEffect(() => {
    filterFunctions(props);
  }, []);

  const [procedureRunningEstimateTime, setprocedureRunningEstimateTime] =
    useState(undefined);

  const { width } = useWindowDimensions();
  const breakpoint = 768;
  const createJson = [];
  const createJSON_X = {};

  function fieldFunc(d) {
    if (d && d.constructor === String) {
      if (d.includes('.')) {
        return parseFloat(d).toFixed(1);
      }
      return d;
    }
    return d;
  }

  function returnImgData(newstr1, newstr) {
    newstr1 =
      newstr1 !== undefined
        ? NameToLetter(ChangeName(newstr1.split('/').pop()))
        : '';
    newstr =
      newstr !== undefined
        ? NameToLetter(ChangeName(newstr.split('/').pop()))
        : '';
    return newstr1 + newstr;
  }

  if (props.VulTool_data.length > 0) {
    props.VulTool_data.forEach((vul) => {
      if (props.VulTool_dataHeader.length > 0) {
        props.VulTool_dataHeader.forEach((element) => {
          if (element.field !== 'sideLeftHeader') {
            const imgScr1 = `imgFlagSrc1_${element.field}_${vul.field}`;
            const imgScr = `imgFlagSrc_${element.field}_${vul.field}`;
            const newstr1 =
              vul[imgScr1] !== undefined && vul[imgScr1].split('/').pop();
            const newstr =
              vul[imgScr] !== undefined && vul[imgScr].split('/').pop();
            createJSON_X[imgScr1] = newstr1 && ChangeName(newstr1);
            createJSON_X[imgScr] = newstr && ChangeName(newstr);
          }
        });
      }
    });
  }

  if (props.VulTool_dataHeader.length > 0) {
    props.VulTool_dataHeader.forEach((element) => {
      if (element.field === 'sideLeftHeader') {
        createJson.push({
          ...element,
          cellClass:
            'ws-normal-lh30 text-white bg-primary ag-cell-verticalHeader',
          minWidth: 180,
          maxWidth: 180,
          cellRendererFramework: (params) => (
            <span
              id={params.data.field}
              rowindex={params.rowIndex + 1}
              title={params.data.sideLeftHeader}
            >
              {params.data.sideLeftHeader}
            </span>
          ),
        });
      } else {
        createJson.push(
          {
            ...element,
            minWidth: 150,
            cellClass: 'text-white',
            cellClassRules: {
              cellAlign: (params) => params,
            },
            cellRendererFramework: (params) => {
              let statusImgFlagSrc = false;
              const imgFlagSrcPath =
                params.data[`imgFlagSrc_${element.field}_${params.data.field}`];
              if (imgFlagSrcPath) {
                statusImgFlagSrc = true;
              }

              let statusImgFlagSrc1 = false;
              const imgFlagSrcPath1 =
                params.data[
                  `imgFlagSrc1_${element.field}_${params.data.field}`
                ];
              if (imgFlagSrcPath1) {
                statusImgFlagSrc1 = true;
              }

              let statusImgStartSrc = false;
              let imgStartSrcPath = '';
              if (element.field !== 'groupMedian') {
                imgStartSrcPath =
                  params.data[
                    `imgStarSrc_${element.field}_${params.data.field}`
                  ];
                if (imgStartSrcPath) {
                  statusImgStartSrc = true;
                }
              }

              return (
                <>
                  <div
                    className={
                      params.data[element.field] === ''
                        ? 'd-flex align-items-center'
                        : 'd-flex align-items-center border border-top-0 border-bottom-1 border-start-0 border-end-0 border-light'
                    }
                  >
                    <div
                      className={
                        statusImgFlagSrc1 || statusImgFlagSrc
                          ? 'w-60 text-center'
                          : 'w-100 text-center'
                      }
                    >
                      <span className='text-primary'>
                        {params.data[element.field]}
                      </span>
                    </div>
                    <div
                      className={
                        statusImgFlagSrc1 || statusImgFlagSrc
                          ? 'w-40 border border-end-0 border-top-0 border-bottom-0 border-start-1 border-light p-2 d-flex'
                          : ''
                      }
                    >
                      {statusImgFlagSrc && (
                        <div>
                          <img
                            src={`${ICON_IMAGE_PATH}${NameToImageIcon(
                              imgFlagSrcPath
                            )}`}
                            title={imgFlagSrcPath}
                            style={{
                              float: 'left',
                              height: '20px',
                              paddingLeft: '5px',
                            }}
                            alt='imgFlag'
                          />
                        </div>
                      )}
                      {statusImgFlagSrc1 && (
                        <div>
                          <img
                            src={`${ICON_IMAGE_PATH}${NameToImageIcon(
                              imgFlagSrcPath1
                            )}`}
                            title={imgFlagSrcPath1}
                            style={{
                              float: 'left',
                              height: '20px',
                              paddingLeft: '10px',
                            }}
                            alt='imgFlag1'
                          />
                        </div>
                      )}
                    </div>
                  </div>
                  {element.field === 'groupMedian' && (
                    <div>
                      <div
                        id='topPart'
                        style={{
                          height: `${
                            params.data[
                              `topHalf_${element.field}_${params.data.field}`
                            ]
                          }px`,
                        }}
                      />
                      <div
                        id='bottomPart'
                        style={{
                          backgroundColor:
                            params.data[
                              `color_${element.field}_${params.data.field}`
                            ],
                          height: `${
                            params.data[
                              `bottomHalf_${element.field}_${params.data.field}`
                            ]
                          }px`,
                        }}
                      />
                    </div>
                  )}
                  {element.field !== 'groupMedian' && (
                    <div>
                      <div
                        id='topPart'
                        style={{
                          textAlign: 'center',
                          height: `${
                            params.data[
                              `topHalf_${element.field}_${params.data.field}`
                            ]
                          }px`,
                        }}
                      >
                        {statusImgStartSrc && (
                          <img
                            src={`${ICON_IMAGE_PATH}${imgStartSrcPath
                              .split('/')
                              .pop()}`}
                            style={{ height: '30px' }}
                            alt='imgStart'
                          />
                        )}
                      </div>
                      <div
                        id='bottomPart'
                        style={{
                          backgroundColor:
                            params.data[
                              `color_${element.field}_${params.data.field}`
                            ],
                          height: `${
                            params.data[
                              `bottomHalf_${element.field}_${params.data.field}`
                            ]
                          }px`,
                        }}
                      />
                    </div>
                  )}
                </>
              );
            },
          },
          {
            headerName: 'T/F',
            field: `${element.field}_1_img`,
            hide: true,
            width: 50,
            cellClassRules: {
              redFont: (params) =>
                params.data[`${element.field}_1_img`] === 'F',
              greenFont: (params) =>
                params.data[`${element.field}_1_img`] === 'T',
            },
          },
          {
            headerName: 'T/F',
            field: `${element.field}_1_img1`,
            hide: true,
            width: 50,
            cellClassRules: {
              redFont: (params) =>
                params.data[`${element.field}_1_img1`] === 'F',
              greenFont: (params) =>
                params.data[`${element.field}_1_img1`] === 'T',
            },
          }
        );
      }
    });
  }

  function getSummaryTable() {
    return (
      <div key='1' className='row m-4'>
        {props.VulTool_dataSummarySelection.forEach((element, index) => {
          // eslint-disable-next-line no-lone-blocks
          let updateLeftClass = '';
          let updateRightClass = '';

          if (index % 2 === numConst.NUMBER_ONE) {
            updateLeftClass =
              'col-4 col-md-2 border border-end-0 border-light m-0 p-2 text-primary bg-light-text text-break';
            updateRightClass =
              'col-8 col-md-10 border border-light m-0 p-2 text-primary bg-light-text text-break';
          } else {
            updateLeftClass =
              'col-4 col-md-2 border border-end-0 border-light m-0 p-2 text-primary text-break';
            updateRightClass =
              'col-8 col-md-10 border border-light m-0 p-2 text-primary text-break';
          }

          if (props.VulTool_dataSummarySelection.length - 1 === index) {
            updateLeftClass += ' border-bottom-1';
            updateRightClass += ' border-bottom-1';
          } else {
            updateLeftClass += ' border-bottom-0';
            updateRightClass += ' border-bottom-0';
          }

          if (element && element.label !== '') {
            return (
              <div className='row m-0 p-0' key={`row_${index + 1}`}>
                <div className={updateLeftClass}>{element.headerName}</div>
                <div className={updateRightClass}>{element.label}</div>
              </div>
            );
          }
        })}
      </div>
    );
  }

  const gridOptions = {
    colDefsMedalsIncluded: createJson,
    colDefsMedalsExcluded: [],
    pinColumns: {
      isPinOption: width > breakpoint,
      columns: [
        {
          colId: 'sideLeftHeader',
          pinned: 'left',
        },
      ],
    },
    paggination: { isPagging: false, pageSize: 20 },
    isfloatingFilter: false,
    rowSelection: 'multiple',
    domLayout: 'normal',
    gridHeight: '80vh',
    headerHeight: 80,
    statusBar: bottomStatusBar,
    rowHeight: 90,
    rowData:
      props.VulTool_data !== undefined
        ? props.VulTool_data.map((x) => ({
            ...x,
            TrialStatus: props.TrialStatus,
            allowDownload: props.allowDownload,
            ...createJSON_X,
            '10x_Genomics__Inc__1_img1': returnImgData(
              x[`imgFlagSrc1_10x_Genomics__Inc__${x.field}`],
              undefined
            ),
            '10x_Genomics__Inc__1_img': returnImgData(
              undefined,
              x[`imgFlagSrc_10x_Genomics__Inc__${x.field}`]
            ),

            groupMedian_1_img1: returnImgData(
              x[`imgFlagSrc1_10x_groupMedian_${x.field}`],
              undefined
            ),
            groupMedian_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_10x_groupMedian_${x.field}`]
            ),

            Adicet_Bio__Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_10x_Adicet_Bio__Inc__${x.field}`],
              undefined
            ),
            Adicet_Bio__Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_10x_Adicet_Bio__Inc__${x.field}`]
            ),

            ADMA_Biologics__Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_10x_ADMA_Biologics__Inc__${x.field}`],
              undefined
            ),
            ADMA_Biologics__Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_10x_ADMA_Biologics__Inc__${x.field}`]
            ),

            Adial_Pharmaceuticals_Inc_1_img1: returnImgData(
              x[`imgFlagSrc1_10x_Adial_Pharmaceuticals_Inc_${x.field}`],
              undefined
            ),
            Adial_Pharmaceuticals_Inc_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_10x_Adial_Pharmaceuticals_Inc_${x.field}`]
            ),

            Adhera_Therapeutics__Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_10x_Adhera_Therapeutics__Inc__${x.field}`],
              undefined
            ),
            Adhera_Therapeutics__Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_10x_Adhera_Therapeutics__Inc__${x.field}`]
            ),

            ADDvantage_Technologies_Group_Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_ADDvantage_Technologies_Group_Inc__${x.field}`],
              undefined
            ),
            ADDvantage_Technologies_Group_Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_ADDvantage_Technologies_Group_Inc__${x.field}`]
            ),

            Addus_HomeCare_Corporation_1_img1: returnImgData(
              x[`imgFlagSrc1_Addus_HomeCare_Corporation_${x.field}`],
              undefined
            ),
            Addus_HomeCare_Corporation_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Addus_HomeCare_Corporation_${x.field}`]
            ),

            Adaptive_Biotechnologies_Corp_1_img1: returnImgData(
              x[`imgFlagSrc1_Adaptive_Biotechnologies_Corp_${x.field}`],
              undefined
            ),
            Adaptive_Biotechnologies_Corp_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Adaptive_Biotechnologies_Corp_${x.field}`]
            ),

            AdaptHealth_Corp__1_img1: returnImgData(
              x[`imgFlagSrc1_AdaptHealth_Corp__${x.field}`],
              undefined
            ),
            AdaptHealth_Corp__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_AdaptHealth_Corp__${x.field}`]
            ),

            Adams_Resources___Energy_Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_Adams_Resources___Energy_Inc__${x.field}`],
              undefined
            ),
            Adams_Resources___Energy_Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Adams_Resources___Energy_Inc__${x.field}`]
            ),

            Adamas_Pharmaceuticals_Inc_1_img1: returnImgData(
              x[`imgFlagSrc1_Adamas_Pharmaceuticals_Inc_${x.field}`],
              undefined
            ),
            Adamas_Pharmaceuticals_Inc_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Adamas_Pharmaceuticals_Inc_${x.field}`]
            ),

            Acushnet_Holdings_Corp_1_img1: returnImgData(
              x[`imgFlagSrc1_Acushnet_Holdings_Corp_${x.field}`],
              undefined
            ),
            Acushnet_Holdings_Corp_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Acushnet_Holdings_Corp_${x.field}`]
            ),

            Activision_Blizzard__Inc_1_img1: returnImgData(
              x[`imgFlagSrc1_Activision_Blizzard__Inc_${x.field}`],
              undefined
            ),
            Activision_Blizzard__Inc_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Activision_Blizzard__Inc_${x.field}`]
            ),

            Actinium_Pharmaceuticals__Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_Actinium_Pharmaceuticals__Inc__${x.field}`],
              undefined
            ),
            Actinium_Pharmaceuticals__Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Actinium_Pharmaceuticals__Inc__${x.field}`]
            ),

            Acorn_Energy_Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_Acorn_Energy_Inc__${x.field}`],
              undefined
            ),
            Acorn_Energy_Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Acorn_Energy_Inc__${x.field}`]
            ),

            Acorda_Therapeutics_Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_Acorda_Therapeutics_Inc__${x.field}`],
              undefined
            ),
            Acorda_Therapeutics_Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Acorda_Therapeutics_Inc__${x.field}`]
            ),

            ACNB_Corporation_1_img1: returnImgData(
              x[`imgFlagSrc1_ACNB_Corporation_${x.field}`],
              undefined
            ),
            ACNB_Corporation_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_ACNB_Corporation_${x.field}`]
            ),

            Acme_United_Corporation__1_img1: returnImgData(
              x[`imgFlagSrc1_Acme_United_Corporation__${x.field}`],
              undefined
            ),
            Acme_United_Corporation__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Acme_United_Corporation__${x.field}`]
            ),

            ACM_Research_Inc_1_img1: returnImgData(
              x[`imgFlagSrc1_ACM_Research_Inc_${x.field}`],
              undefined
            ),
            ACM_Research_Inc_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_ACM_Research_Inc_${x.field}`]
            ),

            Aclaris_Therapeutics_Inc_1_img1: returnImgData(
              x[`imgFlagSrc1_Aclaris_Therapeutics_Inc_${x.field}`],
              undefined
            ),
            Aclaris_Therapeutics_Inc_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Aclaris_Therapeutics_Inc_${x.field}`]
            ),

            ACI_Worldwide_Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_ACI_Worldwide_Inc__${x.field}`],
              undefined
            ),
            ACI_Worldwide_Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_ACI_Worldwide_Inc__${x.field}`]
            ),

            Achieve_Life_Sciences_Inc_1_img1: returnImgData(
              x[`imgFlagSrc1_Achieve_Life_Sciences_Inc_${x.field}`],
              undefined
            ),
            Achieve_Life_Sciences_Inc_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Achieve_Life_Sciences_Inc_${x.field}`]
            ),

            Acer_Therapeutics_Inc_1_img1: returnImgData(
              x[`imgFlagSrc1_Acer_Therapeutics_Inc_${x.field}`],
              undefined
            ),
            Acer_Therapeutics_Inc_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Acer_Therapeutics_Inc_${x.field}`]
            ),

            AcelRx_Pharmaceuticals_Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_AcelRx_Pharmaceuticals_Inc__${x.field}`],
              undefined
            ),
            AcelRx_Pharmaceuticals_Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_AcelRx_Pharmaceuticals_Inc__${x.field}`]
            ),

            Accuray_Incorporated_1_img1: returnImgData(
              x[`imgFlagSrc1_Accuray_Incorporated_${x.field}`],
              undefined
            ),
            Accuray_Incorporated_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Accuray_Incorporated_${x.field}`]
            ),

            Acco_Brands_Corporation_1_img1: returnImgData(
              x[`imgFlagSrc1_Acco_Brands_Corporation_${x.field}`],
              undefined
            ),
            Acceleron_Pharma_Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_Acceleron_Pharma_Inc__${x.field}`],
              undefined
            ),
            Accelerate_Diagnostics_Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_Accelerate_Diagnostics_Inc__${x.field}`],
              undefined
            ),
            Acadia_Realty_Trust_1_img1: returnImgData(
              x[`imgFlagSrc1_Acadia_Realty_Trust_${x.field}`]
            ),
            ACADIA_Pharmaceuticals_Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_ACADIA_Pharmaceuticals_Inc__${x.field}`],
              undefined
            ),
            Acadia_Healthcare_Company_Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_Acadia_Healthcare_Company_Inc__${x.field}`],
              undefined
            ),
            Abraxas_Petroleum_Corporation_1_img1: returnImgData(
              x[`imgFlagSrc1_Abraxas_Petroleum_Corporation_${x.field}`],
              undefined
            ),
            ABM_Industries_Incorporated_1_img1: returnImgData(
              x[`imgFlagSrc1_ABM_Industries_Incorporated_${x.field}`],
              undefined
            ),
            Abiomed__Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_Abiomed__Inc__${x.field}`],
              undefined
            ),
            Abercrombie___Fitch_Company_1_img1: returnImgData(
              x[`imgFlagSrc1_Abercrombie___Fitch_Company_${x.field}`],
              undefined
            ),
            AbbVie_Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_AbbVie_Inc__${x.field}`],
              undefined
            ),
            Abbott_Laboratories_1_img1: returnImgData(
              x[`imgFlagSrc1_Abbott_Laboratories_${x.field}`],
              undefined
            ),
            AAON_Inc__1_img1: returnImgData(
              x[`imgFlagSrc1_AAON_Inc__${x.field}`],
              undefined
            ),
            A10_Networks_Inc_1_img1: returnImgData(
              x[`imgFlagSrc1_A10_Networks_Inc_${x.field}`],
              undefined
            ),
            '1347_Property_Insurance_Holdings_Inc_1_img1': returnImgData(
              x[`imgFlagSrc1_1347_Property_Insurance_Holdings_Inc_${x.field}`],
              undefined
            ),
            '1st_Constitution_Bancorp_1_img1': returnImgData(
              x[`imgFlagSrc1_1st_Constitution_Bancorp_${x.field}`],
              undefined
            ),
            '1_800_FLOWERS_COM_Inc._1_img1': returnImgData(
              x[`imgFlagSrc1_1_800_FLOWERS_COM_Inc_${x.field}`],
              undefined
            ),
            '1st_Source_Corporation_1_img1': returnImgData(
              x[`imgFlagSrc1_1st_Source_Corporation_${x.field}`],
              undefined
            ),
            '22nd_Century_Group_Inc_1_img1': returnImgData(
              x[`imgFlagSrc1_22nd_Century_Group_Inc_${x.field}`],
              undefined
            ),
            '2U_Inc_1_img1': returnImgData(
              x[`imgFlagSrc1_2U_Inc_${x.field}`],
              undefined
            ),
            '3D_Systems_Corporation_1_img1': returnImgData(
              x[`imgFlagSrc1_3D_Systems_Corporation_${x.field}`],
              undefined
            ),
            '3M_Company_1_img1': returnImgData(
              x[`imgFlagSrc1_3M_Company_Inc_${x.field}`],
              undefined
            ),
            '89bio_Inc_1_img1': returnImgData(
              x[`imgFlagSrc1_89bio_Inc_${x.field}`],
              undefined
            ),
            '9_Meters_Biopharma_Inc_1_img1': returnImgData(
              x[`imgFlagSrc1_9_Meters_Biopharma_Inc_${x.field}`],
              undefined
            ),
            'A_H._Belo_Corporation_1_img1': returnImgData(
              x[`imgFlagSrc1_A_H._Belo_Corporation_${x.field}`],
              undefined
            ),

            Acco_Brands_Corporation_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Acco_Brands_Corporation_${x.field}`]
            ),
            Acceleron_Pharma_Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Acceleron_Pharma_Inc__${x.field}`]
            ),
            Accelerate_Diagnostics_Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Accelerate_Diagnostics_Inc__${x.field}`]
            ),
            Acadia_Realty_Trust_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Acadia_Realty_Trust_${x.field}`]
            ),
            ACADIA_Pharmaceuticals_Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_ACADIA_Pharmaceuticals_Inc__${x.field}`]
            ),
            Acadia_Healthcare_Company_Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Acadia_Healthcare_Company_Inc__${x.field}`]
            ),
            Abraxas_Petroleum_Corporation_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Abraxas_Petroleum_Corporation_${x.field}`]
            ),
            ABM_Industries_Incorporated_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_ABM_Industries_Incorporated_${x.field}`]
            ),
            Abiomed__Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Abiomed__Inc__${x.field}`]
            ),
            Abercrombie___Fitch_Company_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Abercrombie___Fitch_Company_${x.field}`]
            ),
            AbbVie_Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_AbbVie_Inc__${x.field}`]
            ),
            Abbott_Laboratories_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_Abbott_Laboratories_${x.field}`]
            ),
            AAON_Inc__1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_AAON_Inc__${x.field}`]
            ),
            A10_Networks_Inc_1_img: returnImgData(
              undefined,
              x[`imgFlagSrc_A10_Networks_Inc_${x.field}`]
            ),
            '1347_Property_Insurance_Holdings_Inc_1_img': returnImgData(
              undefined,
              x[`imgFlagSrc_1347_Property_Insurance_Holdings_Inc_${x.field}`]
            ),
            '1st_Constitution_Bancorp_1_img': returnImgData(
              undefined,
              x[`imgFlagSrc_1st_Constitution_Bancorp_${x.field}`]
            ),
            '1_800_FLOWERS_COM_Inc._1_img': returnImgData(
              undefined,
              x[`imgFlagSrc_1_800_FLOWERS_COM_Inc_${x.field}`]
            ),
            '1st_Source_Corporation_1_img': returnImgData(
              undefined,
              x[`imgFlagSrc_1st_Source_Corporation_${x.field}`]
            ),
            '22nd_Century_Group_Inc_1_img': returnImgData(
              undefined,
              x[`imgFlagSrc_22nd_Century_Group_Inc_${x.field}`]
            ),
            '2U_Inc_1_img': returnImgData(
              undefined,
              x[`imgFlagSrc_2U_Inc_${x.field}`]
            ),
            '3D_Systems_Corporation_1_img': returnImgData(
              undefined,
              x[`imgFlagSrc_3D_Systems_Corporation_${x.field}`]
            ),
            '3M_Company_1_img': returnImgData(
              undefined,
              x[`imgFlagSrc_3M_Company_Inc_${x.field}`]
            ),
            '89bio_Inc_1_img': returnImgData(
              undefined,
              x[`imgFlagSrc_89bio_Inc_${x.field}`]
            ),
            '9_Meters_Biopharma_Inc_1_img': returnImgData(
              undefined,
              x[`imgFlagSrc_9_Meters_Biopharma_Inc_${x.field}`]
            ),
            'A_H._Belo_Corporation_1_img': returnImgData(
              undefined,
              x[`imgFlagSrc_A_H._Belo_Corporation_${x.field}`]
            ),

            groupMedian: fieldFunc(x.groupMedian),
            ADMA_Biologics__Inc_: fieldFunc(x.ADMA_Biologics__Inc_),
            Adicet_Bio__Inc_: fieldFunc(x.Adicet_Bio__Inc_),
            Adial_Pharmaceuticals_Inc: fieldFunc(x.Adial_Pharmaceuticals_Inc),
            Adhera_Therapeutics__Inc_: fieldFunc(x.Adhera_Therapeutics__Inc_),
            ADDvantage_Technologies_Group_Inc_: fieldFunc(
              x.Addus_HomeCare_Corporation
            ),
            Addus_HomeCare_Corporation: fieldFunc(
              x.Adaptive_Biotechnologies_Corp
            ),
            Adaptive_Biotechnologies_Corp: fieldFunc(x.AdaptHealth_Corp_),
            AdaptHealth_Corp_: fieldFunc(x.AdaptHealth_Corp_),
            Adams_Resources___Energy_Inc_: fieldFunc(
              x.Adams_Resources___Energy_Inc_
            ),
            Adamas_Pharmaceuticals_Inc: fieldFunc(x.Adamas_Pharmaceuticals_Inc),
            Acushnet_Holdings_Corp: fieldFunc(x.Acushnet_Holdings_Corp),
            Activision_Blizzard__Inc: fieldFunc(x.Activision_Blizzard__Inc),
            Actinium_Pharmaceuticals__Inc_: fieldFunc(
              x.Actinium_Pharmaceuticals__Inc_
            ),
            Acorn_Energy_Inc_: fieldFunc(x.Acorn_Energy_Inc_),
            Acorda_Therapeutics_Inc_: fieldFunc(x.Acorda_Therapeutics_Inc_),
            ACNB_Corporation: fieldFunc(x.ACNB_Corporation),
            Acme_United_Corporation_: fieldFunc(x.Acme_United_Corporation_),
            ACM_Research_Inc: fieldFunc(x.ACM_Research_Inc),
            Aclaris_Therapeutics_Inc: fieldFunc(x.Aclaris_Therapeutics_Inc),
            ACI_Worldwide_Inc_: fieldFunc(x.ACI_Worldwide_Inc_),
            Achieve_Life_Sciences_Inc: fieldFunc(x.Achieve_Life_Sciences_Inc),
            Acer_Therapeutics_Inc: fieldFunc(x.Acer_Therapeutics_Inc),
            AcelRx_Pharmaceuticals_Inc_: fieldFunc(
              x.AcelRx_Pharmaceuticals_Inc_
            ),
            Accuray_Incorporated: fieldFunc(x.Accuray_Incorporated),
            Acco_Brands_Corporation: fieldFunc(x.Acco_Brands_Corporation),
            Acceleron_Pharma_Inc_: fieldFunc(x.Acceleron_Pharma_Inc_),
            Accelerate_Diagnostics_Inc_: fieldFunc(
              x.Accelerate_Diagnostics_Inc_
            ),
            Acadia_Realty_Trust: fieldFunc(x.Acadia_Realty_Trust),
            ACADIA_Pharmaceuticals_Inc_: fieldFunc(
              x.ACADIA_Pharmaceuticals_Inc_
            ),
            Acadia_Healthcare_Company_Inc_: fieldFunc(
              x.Acadia_Healthcare_Company_Inc_
            ),
            Abraxas_Petroleum_Corporation: fieldFunc(
              x.Abraxas_Petroleum_Corporation
            ),
            ABM_Industries_Incorporated: fieldFunc(
              x.ABM_Industries_Incorporated
            ),
            Abiomed__Inc_: fieldFunc(x.Abiomed__Inc_),
            Abercrombie___Fitch_Company: fieldFunc(
              x.Abercrombie___Fitch_Company
            ),
            AbbVie_Inc_: fieldFunc(x.AbbVie_Inc_),
            Abbott_Laboratories: fieldFunc(x.Abbott_Laboratories),
            AAON_Inc_: fieldFunc(x.AAON_Inc_),
            A10_Networks_Inc: fieldFunc(x.A10_Networks_Inc),
            '10x_Genomics__Inc_': fieldFunc(x['10x_Genomics__Inc_']),
            '1347_Property_Insurance_Holdings_Inc': fieldFunc(
              x['1347_Property_Insurance_Holdings_Inc']
            ),
            '1st_Constitution_Bancorp': fieldFunc(
              x['1st_Constitution_Bancorp']
            ),
            '1_800_FLOWERS_COM_Inc.': fieldFunc(x['1_800_FLOWERS_COM_Inc']),
            '1st_Source_Corporation': fieldFunc(x['1st_Source_Corporation']),
            '22nd_Century_Group_Inc': fieldFunc(x['22nd_Century_Group_Inc']),
            '2U_Inc': fieldFunc(x['2U_Inc']),
            '3D_Systems_Corporation': fieldFunc(x['3D_Systems_Corporation']),
            '3M_Company': fieldFunc(x['3M_Company']),
            '89bio_Inc': fieldFunc(x['89bio_Inc']),
            '9_Meters_Biopharma_Inc': fieldFunc(x['9_Meters_Biopharma_Inc']),
            'A_H._Belo_Corporation': fieldFunc(x['A_H._Belo_Corporation']),
          }))
        : [],
  };

  return (
    <Page key={1}>
      <div className='pt-3 pb-4'>
        <CollapseComponent isOpen Heading='Comparator Filter'>
          <CompanySearchComponent
            showFilterModel={props.showFilterModel}
            listOfcompanySearchOptions={props.listOfcompanySearchOptions}
            HandleFilterModel={props.HandleFilterModel}
            handleCompanySelection={props.handleCompanySelection}
            handleShowIndividualOption={props.handleShowIndividualOption}
            showIndividualOption={props.showIndividualOption}
            handleShowGroupOption={props.handleShowGroupOption}
            handleBulkCompanySelection={props.handleBulkCompanySelection}
            piListIndices={props.piListIndices}
            handleIndexSelectionChange={props.handleIndexSelectionChange}
            indexSelection={props.indexSelection}
            listOfExchange={props.listOfExchange}
            handleExchangeSelectionChange={props.handleExchangeSelectionChange}
            exchangeSelection={props.exchangeSelection}
            aiPeerGroups={props.aiPeerGroups}
            handleAIPeerGroupSelection={props.handleAIPeerGroupSelection}
            aiPeerGroupSelection={props.aiPeerGroupSelection}
            listMarketCap={props.listMarketCap}
            marketCapSelection={props.marketCapSelection}
            handleMarketCapSelection={props.handleMarketCapSelection}
            txtMarketCapMinRange={props.txtMarketCapMinRange}
            txtMarketCapMaxRange={props.txtMarketCapMaxRange}
            handleMarketCapMinRange={props.handleMarketCapMinRange}
            handleMarketCapMaxRange={props.handleMarketCapMaxRange}
            handleIndustrySelection={props.handleIndustrySelection}
            industrySelection={props.industrySelection}
            companyLocationSelection={props.companyLocationSelection}
            piListOfSectorsAndIndustries={props.piListOfSectorsAndIndustries}
            HandleTreeViewIndustry={props.HandleTreeViewIndustry}
            listRegeionAndCountries={props.listRegeionAndCountries}
            handleSaveCurrentList={props.handleSaveCurrentList}
            HandleTreeViewCompanyLocation={props.HandleTreeViewCompanyLocation}
            companySearchOptionSelection={props.companySearchOptionSelection}
            handleCompanySearchOptionSelection={
              props.handleCompanySearchOptionSelection
            }
            getAllCompanySearchSelection={props.getAllCompanySearchSelection}
            txtSaveCurrentList={props.txtSaveCurrentList}
            ResetCompanySearchOptionSelection={
              props.ResetCompanySearchOptionSelection
            }
            saveCurrentListButtonText={props.saveCurrentListButtonText}
            handleCompanyAndIndustry={props.handleCompanyAndIndustry}
            freeSearchRecordset={props.freeSearchRecordset}
            companySelection={props.companySelection}
            companySingleSelection={props.companySingleSelection}
            handleCompanySearchUpdateReq={props.handleCompanySearchUpdateReq}
            getCompanySearchOptions={props.getCompanySearchOptions}
            handleCompanySearchDeleteReq={props.handleCompanySearchDeleteReq}
            handleCompanySingleSelection={props.handleCompanySingleSelection}
            handdleRun={props.handdleRun}
            handleComapnySearchSelectionInvComp={
              props.handleComapnySearchSelectionInvComp
            }
            defaultCmpRegeionAndCountries={props.defaultCmpRegeionAndCountries}
            defaultPiListSectorsAndIndustries={
              props.defaultPiListSectorsAndIndustries
            }
          />

          <div className='row pt-2'>
            <div className='container'>
              <div className='row pb-3'>
                <div className='col-sm'>
                  <div className='row pt-4'>
                    <label
                      htmlFor='byCompanySelection'
                      className='col-6 col-md-4 col-form-label'
                    >
                      <button
                        type='button'
                        className='btn btn-primary btn-sm'
                        onClick={() => {
                          props.HandleFilterModel(true);
                        }}
                      >
                        By Company Selection
                      </button>
                    </label>
                    <div className='col-sm-8 text-secondary labelNewsCompanyFilter'>
                      {props.invCompCompanyPeerGroupSelection &&
                      props.invCompCompanyPeerGroupSelection.label ? (
                        <div className='btnPeerGrpRemove'>
                          {props.invCompCompanyPeerGroupSelection.label}
                          <i
                            className='bi bi-backspace-fill'
                            title='Clear selection'
                            onClick={() => {
                              props.handleClearPeerGroupCompanySelection();
                              props.handleResetCompnaySelections();
                            }}
                          />
                        </div>
                      ) : (
                        'No specific company selected'
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className='row mb-3'>
              <label
                htmlFor='ddlEvents'
                className='col-form-label text-secondary'
              >
                <b>Comparison Criteria:</b>
              </label>
            </div>

            <div className='container'>
              <div className='row pb-3'>
                <div className='col-sm col-md-6'>
                  <div className='row align-items-flex-start'>
                    <label
                      htmlFor='Vulnerability'
                      className='col-12 col-md-4 col-form-label word-break-breakall'
                    >
                      <b> Vulnerability</b>
                    </label>
                    <div className='col-12 col-md-8'>
                      <DropdownTreeSelect
                        onChangeSelection={props.HandleTreeView_Vulnerability}
                        options={props.DDLVulnerability}
                        placeholder={
                          props.SetVulnerability &&
                          props.SetVulnerability.length ===
                            numConst.EMPTY_TABLE_LENGTH
                            ? '(Optional) Choose one or more Vulnerability...'
                            : ' '
                        }
                        totalSelection={
                          props.SetVulnerability &&
                          props.SetVulnerability.length
                        }
                      />
                    </div>
                  </div>
                </div>
                <div className='col-sm col-md-6'>
                  <div className='row align-items-flex-start'>
                    <label
                      htmlFor='Ownership'
                      className='col-12 col-md-4 col-form-label word-break-breakall'
                    >
                      <b>Ownership</b>
                    </label>
                    <div className='col-12 col-md-8'>
                      <DropdownTreeSelect
                        onChangeSelection={props.HandleTreeView_Ownership}
                        options={props.DDLOwnership}
                        placeholder={
                          props.SetOwnership &&
                          props.SetOwnership.length ===
                            numConst.EMPTY_TABLE_LENGTH
                            ? '(Optional) Choose one or more Ownership...'
                            : ' '
                        }
                        totalSelection={
                          props.SetOwnership && props.SetOwnership.length
                        }
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className='container'>
              <div className='row'>
                <div className='col-sm'>
                  <div className='row'>
                    <label
                      htmlFor='KeyFinancials'
                      className='col-12 col-md-4 col-form-label word-break-breakall'
                    >
                      <b>Key Financials</b>
                    </label>
                    <div className='col-12 col-md-8'>
                      <DropdownTreeSelect
                        onChangeSelection={props.HandleTreeView_KeyFinancials}
                        options={props.DDLKeyFinancials}
                        placeholder={
                          props.SetKeyFinancials &&
                          props.SetKeyFinancials.length ===
                            numConst.EMPTY_TABLE_LENGTH
                            ? '(Optional) Choose one or more Key Financials...'
                            : ' '
                        }
                        totalSelection={
                          props.SetKeyFinancials &&
                          props.SetKeyFinancials.length
                        }
                      />
                    </div>
                  </div>
                </div>
                <div className='col-sm'>
                  <div className='mb-3 row'>
                    <label
                      htmlFor='Governance'
                      className='col-12 col-md-4 col-form-label word-break-breakall'
                    >
                      <b> Governance </b>
                    </label>
                    <div className='col-12 col-md-8'>
                      <DropdownTreeSelect
                        onChangeSelection={props.HandleTreeView_Governance}
                        options={props.DDLGovernance}
                        placeholder={
                          props.SetGovernance &&
                          props.SetGovernance.length ===
                            numConst.EMPTY_TABLE_LENGTH
                            ? '(Optional) Choose one or more Governance...'
                            : ' '
                        }
                        totalSelection={
                          props.SetGovernance && props.SetGovernance.length
                        }
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className='container'>
              <div className='row'>
                <div className='col-sm'>
                  <div className='row'>
                    <label
                      htmlFor='KeyRatios'
                      className='col-12 col-md-4 col-form-label word-break-breakall'
                    >
                      <b>Key Ratios</b>
                    </label>
                    <div className='col-12 col-md-8'>
                      <DropdownTreeSelect
                        onChangeSelection={props.HandleTreeView_KeyRatios}
                        options={props.DDLKeyRatios}
                        placeholder={
                          props.SetKeyRatios &&
                          props.SetKeyRatios.length ===
                            numConst.EMPTY_TABLE_LENGTH
                            ? '(Optional) Choose one or more Key Ratios...'
                            : ' '
                        }
                        totalSelection={
                          props.SetKeyRatios && props.SetKeyRatios.length
                        }
                      />
                    </div>
                  </div>
                </div>
                <div className='col-sm'>
                  <div className='row mb-3'>
                    <label
                      htmlFor='Voting'
                      className='col-12 col-md-4 col-form-label word-break-breakall'
                    >
                      <b>Voting</b>
                    </label>
                    <div className='col-12 col-md-8'>
                      <DropdownTreeSelect
                        onChangeSelection={props.HandleTreeView_Voting}
                        options={props.DDLVoting}
                        placeholder={
                          props.SetVoting &&
                          props.SetVoting.length === numConst.EMPTY_TABLE_LENGTH
                            ? '(Optional) Choose one or more Voting...'
                            : ' '
                        }
                        totalSelection={
                          props.SetVoting && props.SetVoting.length
                        }
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div className='row'>
                <div className='col-sm'>
                  <div className='row'>
                    <FilterSavesearchModal
                      {...props}
                      isShowFilterSavesearchModal
                    />
                  </div>
                </div>
                <div className='col-sm'>
                  <div className='row'>
                    <label
                      htmlFor='Voting'
                      className='col-12 col-md-4 col-form-label word-break-breakall'
                    >
                      <b>Peer Group Selection</b>
                    </label>
                    <div className='col-12 col-md-8'>
                      <DropdownList
                        handleChange={(e) => {
                          props.HandleTreeView_PeerGroupSelection(e);
                        }}
                        isMulti={false}
                        options={props.DDLPeerGroupSelection}
                        Dvalue={props.SetPeerGroupSelection}
                        placeholder='Choose Peer Group Selection...'
                      />
                    </div>
                  </div>
                </div>
              </div>

              <div className='mt-2 row'>
                <div className='col-12'>
                  <button
                    type='button'
                    id='btnVulTool_Search'
                    className='btn btn-primary btn-sm m-2 float-end'
                    onClick={async (e) => {
                      e.preventDefault();
                      props.handleResetLoading();
                      setprocedureRunningEstimateTime(10.25);
                      const t0 = performance.now();
                      const vcidRes = await props.getVCIdReq({
                        vcid_VulTool: props.vcid_VulTool,
                        txtMarketCapMinRange: props.txtMarketCapMinRange,
                        txtMarketCapMaxRange: props.txtMarketCapMaxRange,
                        companySearchOptionSelection:
                          props.companySearchOptionSelection,
                        companySelection: props.companySelection,
                        //
                        SetKeyFinancials: props.SetKeyFinancials,
                        SetKeyRatios: props.SetKeyRatios,
                        SetVulnerability: props.SetVulnerability,
                        SetOwnership: props.SetOwnership,
                        SetGovernance: props.SetGovernance,
                        SetVoting: props.SetVoting,
                        SetPeerGroupSelection: props.SetPeerGroupSelection,
                      });
                      const status = vcidRes.payload.Status;
                      const VCId = vcidRes.payload.vcid;
                      if (status) {
                        await props.getVulDataListReq({
                          vcid: VCId,
                          SetPeerGroupSelection: props.SetPeerGroupSelection,
                          companySearchOptionSelection:
                            props.companySearchOptionSelection,
                          companySelection: props.companySelection,
                        });
                      }
                      const t1 = performance.now();
                      setprocedureRunningEstimateTime((t1 - t0) / 1000);
                    }}
                  >
                    Search
                  </button>
                </div>
              </div>
            </div>
          </div>
        </CollapseComponent>
      </div>
      {props.isLoading ? (
        <div className='vh-100'>
          <div className='h-50'>
            {procedureRunningEstimateTime !== undefined && (
              <ProgressBar avgElapsedTime={procedureRunningEstimateTime} />
            )}
          </div>
        </div>
      ) : props.VulTool_data.length > 0 ? (
        <div key={2}>
          {getSummaryTable()}
          <div className='row'>
            <div className='sticky-outer-wrapper'>
              <Table
                enableCharts
                pageTitle='Vul Comparator'
                gridOptions={gridOptions}
                isAllColumnOnExcel
                hideExcelDownloadIcon={props.trialUserDisableDownload}
              />
            </div>
          </div>
        </div>
      ) : (
        <div className='ps- 4'>{messageConst.NORECORDS}</div>
      )}
    </Page>
  );
};

CompanyPeerGroupComparisonMatrixTool.propTypes = {
  location: PropTypes.shape({
    pathname: PropTypes.any,
    search: PropTypes.any,
  }),
  VulTool_dataHeader: PropTypes.array,
  VulTool_dataSummarySelection: PropTypes.array,
  VulTool_data: PropTypes.array,
  TrialStatus: PropTypes.bool,
  allowDownload: PropTypes.bool,
  isLoading: PropTypes.bool,
  //
  txtMarketCapMaxRange: PropTypes.string,
  txtMarketCapMinRange: PropTypes.string,
  marketCapSelection: PropTypes.any,
  HandleTreeView_PeerGroupSelection: PropTypes.func,
  handleResetLoading: PropTypes.func,
  handleReset: PropTypes.func,
  HandleFilterModel: PropTypes.func,
  handleCompanyChangePeerGrp: PropTypes.func,
  handleClearPeerGroupCompanySelection: PropTypes.func,
  ResetCompanySearchOptionSelection: PropTypes.func,
  getVCIdReq: PropTypes.func,
};

CompanyPeerGroupComparisonMatrixTool.defaultProps = {
  location: {},
  VulTool_dataHeader: [],
  VulTool_dataSummarySelection: [],
  VulTool_data: [],
  TrialStatus: false,
  allowDownload: false,
  isLoading: false,
  //
  txtMarketCapMaxRange: '',
  txtMarketCapMinRange: '',
  marketCapSelection: undefined,
  handleReset: () => {},
  ResetCompanySearchOptionSelection: () => {},
  HandleTreeView_PeerGroupSelection: () => {},
  handleResetLoading: () => {},
  HandleFilterModel: () => {},
  handleCompanyChangePeerGrp: () => {},
  handleClearPeerGroupCompanySelection: () => {},
  getVCIdReq: () => {},
};

export default React.memo(CompanyPeerGroupComparisonMatrixTool);
