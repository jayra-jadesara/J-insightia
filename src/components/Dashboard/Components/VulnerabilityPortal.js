import React, { useEffect } from 'react';
import { Link } from 'react-router-dom';
import bn from '../../../utils/bemnames';
import Page from '../../Page';
import DashboardNewsIndivisual from '../../News/Components/DashboardNewsIndivisual';
import { GetNewsDetails } from '../../../utils/news-util';
import {
  GetStoredProcedureDownload,
  getVulnerabilityhitsData,
  getMagazinesIssuesESG,
} from '../../../utils/dashboard-util';
import WidgetConstant from '../../../constants/WidgetConstant';
import Table from '../../GeneralForm/Table';
import { history } from '../../../utils/navigation-util';
import HelpAndServicesComponent from '../../GeneralForm/HelpAndServicesComponent';
import { toolListItems } from '../../Tools/tools';
import {
  ACTIVIST_VULNERABILITY,
  QUERY_PID,
} from '../../../constants/PathsConstant';
import prodConst from '../../../constants/ProductConstants';
import D3PieChart from '../../GeneralForm/D3PieChart';
import { ARRAY_HAS_NO_LENGTH, NUMBER_THREE } from '../../../constants/NumberConstants';
import { NORECORDS, LOADING } from '../../../constants/MessageConstans';
import MagazinesReportComponentPage from '../../../components/MagazinesReport/MagazinesReportComponentPage';
import PdfViewer from '../../GeneralForm/PdfViewer';
import { agGridSrickyHeader } from '../../../utils/general-util';

const Card = React.lazy(() => import('../../GeneralForm/Card'));
const bem = bn.create('newsNew');
const bem2 = bn.create('tools');

const VulnerabilityPortal = (props) => {
  const [newsDetials, setNewsDeta] = React.useState([]);
  const [mostVulnerableCompanies, setMostVulnerableCompanies] = React.useState(
    []
  );
  const [mostVulnerableCompaniesHit, setMostVulnerableCompaniesHit] =
    React.useState([]);
  const [vulnerableSectors, setVulnerableSectors] = React.useState([]);
  const [magazineData, setMagazineData] = React.useState([]);

  const Top3NewsID = props.vulnerabilityPortalTop3News;
  const Pagging = { isPagging: true, pageSize: 5 };

  function multiCompany(params) {
    let itemArr = [];
    itemArr = params.data.company_name_string !== undefined && params.data.company_name_string
      .split('##')
      .filter((item) => item);
    return itemArr;
  }

  function bindTools(element, index) {
    return (
      <div
        key={index}
        className='card bg-light col-xs-12 col-sm-6 col-md-4 col-lg-4'
      >
        <div className='card-header cardTitleHeader'>
          <span>{element.cardHeading}</span>
        </div>
        <div className='card-body'>
          <div className='card-text'>
            <p>{element.cardDesc}</p>
          </div>
        </div>
        <div>
          <button
            id={`cardItem-${index}_${element.cardHeading.replaceAll(' ', '-')}`} // replace(/\s/g, '-')}`}
            className='btn btn-primary card-button'
            type='button'
            onClick={(e) => {
              e.preventDefault();
              // history.replace(element.cardGotoPath);

              history.push(element.cardGotoPath);
            }}
          >
            {element.castButtonName}
          </button>
        </div>
      </div>
    );
  }

  useEffect(() => {
    const abortController = new AbortController();
    async function getNewsDetails() {
      const newsDetail = [];
      if (Top3NewsID !== undefined) {
        for (const item of Top3NewsID) {
          await GetNewsDetails(item.news_id).then((res) => {
            newsDetail.push(res);
          });
          if (newsDetail.length === NUMBER_THREE) {
            setNewsDeta(newsDetail);
          }
        }
      }
    }
    getNewsDetails();
    return function cleanup() {
      abortController.abort();
    };
  }, [Top3NewsID]);
  window.addEventListener('scroll', () => {
    agGridSrickyHeader();
  });

  useEffect(() => {
    async function getVulnMagazineData() {
      await getMagazinesIssuesESG({
        product_id: prodConst.ACTIVIST_VULNERABILITY,
        article_type_list: prodConst.VULNERABILITY_ARTICLE_TYPE,
      }).then((res) => {
        if (res.data !== null && res.data !== undefined) {
          setMagazineData(res.data.top3Mag);
        }
      });
    }
    getVulnMagazineData();
  }, []);

  const mostVulnerableGridOptions = {
    colDefsMedalsIncluded: [
      {
        headerName: 'Company',
        field: 'Company_name',
        minWidth: 200,
        cellRendererFramework: (params) => (
          <div>
            <Link
              className='text-secondary'
              to={`${ACTIVIST_VULNERABILITY}${QUERY_PID}${params.data.PID}`}
            >
              {params.data.Company_name}
            </Link>
          </div>
        ),
      },
      {
        headerName: 'Sector',
        field: 'industry_sector_name',
        minWidth: 180,
      },
      {
        headerName: 'Vulnerability Score',
        field: 'score',
        minWidth: 150,
      },
    ],
    colDefsMedalsExcluded: [],
    pinColumns: [
      {
        colId: 'Company',
        pinned: 'left',
      },
      {
        colId: 'Vulnerability_Score',
        pinned: 'left',
      },
    ],
    paggination: Pagging,
    groupHeaderHeight: 75,
    isfloatingFilter: false,
    rowData: mostVulnerableCompanies,
  };

  const mostVulnerableHitGridOptions = {
    colDefsMedalsIncluded: [
      {
        headerName: 'Company',
        field: 'company_name_string',
        minWidth: 300,
        cellRenderer: (params) => {
          const eDiv = document.createElement('div');
          const arrayCompany = multiCompany(params);
          if (arrayCompany !== undefined && arrayCompany.length > ARRAY_HAS_NO_LENGTH) {
            multiCompany(params).forEach((d, i) => {
              if (params.data.pid_string.split('##')[i] === undefined) {
                eDiv.innerHTML = '';
              } else {
                eDiv.innerHTML += `<a rel="noopener noreferrer" class="text-secondary" target="_blank"
                href="${ACTIVIST_VULNERABILITY}${QUERY_PID}${params.data.pid_string
                  .split('##')
                  [i].trim()}">
                                ${d}
                                ${
                                  params.data.pid_string.split('##').length ===
                                  i + 1
                                    ? ''
                                    : ' ,'
                                }</a>`;
              }
            });
          }
          return eDiv;
        },
      },
      {
        headerName: 'Headline',
        field: 'news_headline',
        minWidth: 150,
      },
    ],
    colDefsMedalsExcluded: [],
    pinColumns: [
      {
        colId: 'company',
        pinned: 'left',
      },
      {
        colId: 'news_headline',
        pinned: 'left',
      },
    ],
    paggination: Pagging,
    groupHeaderHeight: 75,
    isfloatingFilter: false,
    rowData: mostVulnerableCompaniesHit,
  };

  const newsDetailss = newsDetials !== undefined && newsDetials.length > ARRAY_HAS_NO_LENGTH ? newsDetials.map((item, i) => (
    <div key={`divDashboard${i + 1}`} className='col-lg-4 col-md-12 col-sm-12 mb-3 mt-2'>
      <DashboardNewsIndivisual
        key={`Dashboard${i + 1}`}
        newsid={item.newsid}
        itemDetails={item}
        productId={item.productId}
      />
    </div>
  )) : [];

  useEffect(() => {
    async function getVulnerableCompanies() {
      const StoredProcedure = 'pDashboard_Widget_MostVulnerableCompanies';
      const dashboard_widget_link_id = WidgetConstant.MOST_VULNERABLE_COMPANIES;
      await GetStoredProcedureDownload({
        StoredProcedure,
        dashboard_widget_link_id,
      }).then((res) => {
        setMostVulnerableCompanies(res);
      });
    }
    async function getVulnerableHitCompanies() {
      await getVulnerabilityhitsData({}).then((res) => {
        setMostVulnerableCompaniesHit(res);
      });
    }
    async function getVulnerableSectorsBreakdown() {
      const StoredProcedure = 'pDashboard_Widget_HighVulnerableSectorBreakdown';
      const dashboard_widget_link_id = 0;
      await GetStoredProcedureDownload({
        StoredProcedure,
        dashboard_widget_link_id,
      }).then((res) => {
        setVulnerableSectors(res);
      });
    }
    getVulnerableCompanies();
    getVulnerableHitCompanies();
    getVulnerableSectorsBreakdown();
  }, []);

  return (
    <Page key={1} className='card-padding pt-0'>
      {props.isLoadingDashboard && LOADING}
      {!props.isLoadingDashboard && (
        <div className={bem.b('row avtivistPortal')}>
          <div className='row'>
            <div className='col-12'>
              <Card title='News'>
                <div className='row widgetNewsContainer'>{newsDetailss}</div>
              </Card>
            </div>
          </div>
          <div className='row mt-3'>
            <div className='col-4'>
              { mostVulnerableCompanies &&
              mostVulnerableCompanies.length > ARRAY_HAS_NO_LENGTH ? (
                <Table
                  gridOptions={mostVulnerableGridOptions}
                  title='Most Vulnerable Companies'
                />
              ) : (
                <Card title='Most Vulnerable Companies'>{NORECORDS}</Card>
              )}
            </div>
            <div className='col-4'>
              { mostVulnerableCompaniesHit &&
              mostVulnerableCompaniesHit.length > ARRAY_HAS_NO_LENGTH ? (
                <Table
                  gridOptions={mostVulnerableHitGridOptions}
                  title='Vulnerability Hits'
                />
              ) : (
                <Card title='Vulnerability Hits'>{NORECORDS}</Card>
              )}
            </div>
            <div className='col-4 chartArea d-flex '>
              <D3PieChart
                data={vulnerableSectors}
                cardtitle='Highly Vulnerable Sector Breakdown'
                isComp={false}
                isInvest={false}
                innerRadius={40}
                outerRadius={100}
                height={350}
                isDynamicViewbox
                isDynamicLegendFontSize
              />
            </div>
          </div>
          <div className='row mt-3'>
            <div className='col-12'>
              <Card title='Tools'>
                <div className={bem2.b('')}>
                  {[toolListItems[5]].length > ARRAY_HAS_NO_LENGTH && [toolListItems[5]].map((element, index) => (
                    <div className='row ms-03rem' key={`row_${index + 1}`}>
                      {element.productItems.length > ARRAY_HAS_NO_LENGTH && element.productItems.map((childelement, index) =>
                        bindTools(childelement, index)
                      )}
                    </div>
                  ))}
                </div>
              </Card>
            </div>
          </div>
          <div className='row mt-3'>
            <div className='col-12'>
              <Card title='Publications'>
                {!props.isLoadingMagazinesReport && magazineData.length > ARRAY_HAS_NO_LENGTH ? (
                  <MagazinesReportComponentPage
                    {...props}
                    rowDataList={magazineData}
                    dashboardIDValue={props.dashboardIDValue}
                    hidePDFBox
                  />
                ) : (
                  NORECORDS
                )}
              </Card>
            </div>
          </div>
          <div>
            {props.btnIdForExpandData &&
              props.magazinesReport3_data.length > ARRAY_HAS_NO_LENGTH && (
                <PdfViewer
                  IsShowCard
                  isHide={false}
                  title='View PDF'
                  smalltitle=''
                  fileUrl={props.viewPDFFileName} // fileUrl="/pdf/pdf-open-parameters.pdf"
                  isOpen={props.btnIdForExpandData}
                  clickEvent={props.handleSetBtnIdForExpandData}
                />
              )}
          </div>
          <div className='row'>
            <div className='col-12'>
              <HelpAndServicesComponent />
            </div>
          </div>
        </div>
      )}
    </Page>
  );
};

export default React.memo(VulnerabilityPortal);
